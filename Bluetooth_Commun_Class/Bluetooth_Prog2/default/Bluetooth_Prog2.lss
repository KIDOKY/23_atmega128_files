
Bluetooth_Prog2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000112  00800100  00000a88  00000b1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000038  00800212  00800212  00000c2e  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001a2  00000000  00000000  00000c6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001180  00000000  00000000  00000e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003ba  00000000  00000000  00001f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c74  00000000  00000000  0000234a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a0  00000000  00000000  00002fc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000424  00000000  00000000  00003160  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007a9  00000000  00000000  00003584  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00003d2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 0a 01 	jmp	0x214	; 0x214 <__vector_5>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 4b 02 	jmp	0x496	; 0x496 <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__vector_18>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e8       	ldi	r30, 0x88	; 136
  a0:	fa e0       	ldi	r31, 0x0A	; 10
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	12 e0       	ldi	r17, 0x02	; 2
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b2 e0       	ldi	r27, 0x02	; 2
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 34       	cpi	r26, 0x4A	; 74
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 28 03 	call	0x650	; 0x650 <main>
  c6:	0c 94 42 05 	jmp	0xa84	; 0xa84 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <LcdPutchar>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  ce:	95 e3       	ldi	r25, 0x35	; 53
  d0:	29 2f       	mov	r18, r25
  d2:	2a 95       	dec	r18
  d4:	f1 f7       	brne	.-4      	; 0xd2 <LcdPutchar+0x4>
{
	unsigned char temp;

	// 상위 니블 출력
	//
  	temp = (ch & 0xF0)|0x05;		// 0x05:RS=1(데이터)
  d6:	29 2f       	mov	r18, r25
  d8:	2a 95       	dec	r18
  da:	f1 f7       	brne	.-4      	; 0xd8 <LcdPutchar+0xa>
  dc:	29 2f       	mov	r18, r25
  de:	2a 95       	dec	r18
  e0:	f1 f7       	brne	.-4      	; 0xde <LcdPutchar+0x10>
  e2:	29 2f       	mov	r18, r25
  e4:	2a 95       	dec	r18
  e6:	f1 f7       	brne	.-4      	; 0xe4 <LcdPutchar+0x16>
  e8:	9a 95       	dec	r25
  ea:	f1 f7       	brne	.-4      	; 0xe8 <LcdPutchar+0x1a>
  ec:	98 2f       	mov	r25, r24
  ee:	90 7f       	andi	r25, 0xF0	; 240
  f0:	95 60       	ori	r25, 0x05	; 5
									// RW=0(쓰기),E=1
	LCD_PORT = temp;
  f2:	95 bb       	out	0x15, r25	; 21
	LCD_PORT = temp & ~0x04; 		// E = 0
  f4:	9b 7f       	andi	r25, 0xFB	; 251
  f6:	95 bb       	out	0x15, r25	; 21


	// 하위 니블 출력
	//
	temp = (ch << 4) | 0x05;		// 0x05:RS=1(데이터)
  f8:	82 95       	swap	r24
  fa:	80 7f       	andi	r24, 0xF0	; 240
  fc:	85 60       	ori	r24, 0x05	; 5
									// RW=0(쓰기),E=1
	LCD_PORT = temp;
  fe:	85 bb       	out	0x15, r24	; 21
	LCD_PORT = temp & ~0x04;		// E = 0
 100:	8b 7f       	andi	r24, 0xFB	; 251
 102:	85 bb       	out	0x15, r24	; 21

void LcdPutchar(char ch)
{
	checkbusy();
	write_data(ch);
}
 104:	08 95       	ret

00000106 <LcdPuts>:
//	입력 : str - 출력할 문자열
//
//======================================================

void LcdPuts(char* str)
{
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	ec 01       	movw	r28, r24
 10c:	03 c0       	rjmp	.+6      	; 0x114 <LcdPuts+0xe>
	while(*str)  			// *str이 NULL 문자가 아니면 루프를 돈다.
	{
		LcdPutchar(*str);	// 문자 *str을 화면에 출력
 10e:	0e 94 67 00 	call	0xce	; 0xce <LcdPutchar>
		str++;				// str이 다음 문자를 가리킴
 112:	21 96       	adiw	r28, 0x01	; 1
//
//======================================================

void LcdPuts(char* str)
{
	while(*str)  			// *str이 NULL 문자가 아니면 루프를 돈다.
 114:	88 81       	ld	r24, Y
 116:	88 23       	and	r24, r24
 118:	d1 f7       	brne	.-12     	; 0x10e <LcdPuts+0x8>
	{
		LcdPutchar(*str);	// 문자 *str을 화면에 출력
		str++;				// str이 다음 문자를 가리킴
	}
}
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <write_command>:
	char temp;
 
	//
	// 상위 니블 출력
	//
  	temp = (command & 0xF0)|0x04;	//0x04 : RS=0(명령)
 120:	98 2f       	mov	r25, r24
 122:	90 7f       	andi	r25, 0xF0	; 240
 124:	94 60       	ori	r25, 0x04	; 4
									// RW=0(쓰기),E=1
  	LCD_PORT = temp;
 126:	95 bb       	out	0x15, r25	; 21
  	LCD_PORT = temp & ~0x04;		// E = 0
 128:	9b 7f       	andi	r25, 0xFB	; 251
 12a:	95 bb       	out	0x15, r25	; 21

  	//
  	// 하위 니블 출력
  	//
  	temp = (command << 4) | 0x04;	// 0x04 :RS=0(명령)
 12c:	82 95       	swap	r24
 12e:	80 7f       	andi	r24, 0xF0	; 240
 130:	84 60       	ori	r24, 0x04	; 4
									// RW=0(쓰기),E=1
  	LCD_PORT = temp;	
 132:	85 bb       	out	0x15, r24	; 21
	LCD_PORT = temp & ~0x04;		// E = 0
 134:	8b 7f       	andi	r24, 0xFB	; 251
 136:	85 bb       	out	0x15, r24	; 21
 138:	85 e0       	ldi	r24, 0x05	; 5
 13a:	8a 95       	dec	r24
 13c:	f1 f7       	brne	.-4      	; 0x13a <write_command+0x1a>
	_delay_us(1);
}
 13e:	08 95       	ret

00000140 <LcdCommand>:
//	  		      lcd.h에 정의된 명령을 사용할 것
//
//======================================================

void LcdCommand(char command)
{ 
 140:	1f 93       	push	r17
 142:	18 2f       	mov	r17, r24
 144:	85 e3       	ldi	r24, 0x35	; 53
 146:	98 2f       	mov	r25, r24
 148:	9a 95       	dec	r25
 14a:	f1 f7       	brne	.-4      	; 0x148 <LcdCommand+0x8>
	checkbusy();
	write_command(command);
 14c:	98 2f       	mov	r25, r24
 14e:	9a 95       	dec	r25
 150:	f1 f7       	brne	.-4      	; 0x14e <LcdCommand+0xe>
 152:	98 2f       	mov	r25, r24
 154:	9a 95       	dec	r25
 156:	f1 f7       	brne	.-4      	; 0x154 <LcdCommand+0x14>
 158:	98 2f       	mov	r25, r24
 15a:	9a 95       	dec	r25
 15c:	f1 f7       	brne	.-4      	; 0x15a <LcdCommand+0x1a>
 15e:	8a 95       	dec	r24
 160:	f1 f7       	brne	.-4      	; 0x15e <LcdCommand+0x1e>
 162:	81 2f       	mov	r24, r17
 164:	0e 94 90 00 	call	0x120	; 0x120 <write_command>
	if(command == ALLCLR || command == HOME)
 168:	11 50       	subi	r17, 0x01	; 1
 16a:	12 30       	cpi	r17, 0x02	; 2
 16c:	20 f4       	brcc	.+8      	; 0x176 <LcdCommand+0x36>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 16e:	80 e4       	ldi	r24, 0x40	; 64
 170:	9f e1       	ldi	r25, 0x1F	; 31
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <LcdCommand+0x32>
		_delay_ms(2);
}
 176:	1f 91       	pop	r17
 178:	08 95       	ret

0000017a <LcdMove>:
// 입력 : 	line - 화면의 행(0행부터 시작)
//			pos  - 화면의 열(0열부터 시작)
//=======================================================
void LcdMove(char line, char pos)
{
	pos = (line << 6) + pos; 
 17a:	82 95       	swap	r24
 17c:	88 0f       	add	r24, r24
 17e:	88 0f       	add	r24, r24
 180:	80 7c       	andi	r24, 0xC0	; 192
 182:	68 0f       	add	r22, r24
  	pos |= 0x80;			// 비트 7를 세트한다.

  	LcdCommand(pos);
 184:	86 2f       	mov	r24, r22
 186:	80 68       	ori	r24, 0x80	; 128
 188:	0e 94 a0 00 	call	0x140	; 0x140 <LcdCommand>
}
 18c:	08 95       	ret

0000018e <LcdInit>:
// 기능 : LCD Display를 초기화한다.
//==================================

void LcdInit(void)
{
	LCD_DDR	= 0xFF;			// LCD포트를 출력으로 설정
 18e:	8f ef       	ldi	r24, 0xFF	; 255
 190:	84 bb       	out	0x14, r24	; 20
 192:	80 e6       	ldi	r24, 0x60	; 96
 194:	9a ee       	ldi	r25, 0xEA	; 234
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <LcdInit+0x8>
	_delay_ms(15);
	write_command(0x30);
 19a:	80 e3       	ldi	r24, 0x30	; 48
 19c:	0e 94 90 00 	call	0x120	; 0x120 <write_command>
 1a0:	80 e2       	ldi	r24, 0x20	; 32
 1a2:	9e e4       	ldi	r25, 0x4E	; 78
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <LcdInit+0x16>
	_delay_ms(5);
	write_command(0x30);
 1a8:	80 e3       	ldi	r24, 0x30	; 48
 1aa:	0e 94 90 00 	call	0x120	; 0x120 <write_command>
 1ae:	80 ea       	ldi	r24, 0xA0	; 160
 1b0:	9f e0       	ldi	r25, 0x0F	; 15
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <LcdInit+0x24>
	_delay_ms(1);
	write_command(0x32);
 1b6:	82 e3       	ldi	r24, 0x32	; 50
 1b8:	0e 94 90 00 	call	0x120	; 0x120 <write_command>

	LcdCommand(FUNSET);
 1bc:	88 e2       	ldi	r24, 0x28	; 40
 1be:	0e 94 a0 00 	call	0x140	; 0x140 <LcdCommand>
	LcdCommand(DISP_OFF);
 1c2:	88 e0       	ldi	r24, 0x08	; 8
 1c4:	0e 94 a0 00 	call	0x140	; 0x140 <LcdCommand>
	LcdCommand(ALLCLR);
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	0e 94 a0 00 	call	0x140	; 0x140 <LcdCommand>
	LcdCommand(ENTMOD);
 1ce:	86 e0       	ldi	r24, 0x06	; 6
 1d0:	0e 94 a0 00 	call	0x140	; 0x140 <LcdCommand>

	LcdCommand(DISP_ON);		// 화면을 켠다.
 1d4:	8c e0       	ldi	r24, 0x0C	; 12
 1d6:	0e 94 a0 00 	call	0x140	; 0x140 <LcdCommand>
}
 1da:	08 95       	ret

000001dc <LcdNewchar>:
// 입력 : ch	- 문자코드
//	      font	- 글꼴 데이터
//========================================

void LcdNewchar(char ch, char font[])	// 글자 등록함수
{
 1dc:	0f 93       	push	r16
 1de:	1f 93       	push	r17
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	8b 01       	movw	r16, r22
	int i;
		
	ch <<= 3;			// ch = ch << 3;과 같음
 1e6:	88 0f       	add	r24, r24
 1e8:	88 0f       	add	r24, r24
 1ea:	88 0f       	add	r24, r24
	ch |= 0x40;		// 비트6을 세트 => CGRAM 주소설정

	LcdCommand(ch);	// CGRAM 주소설정 =>LcdPutchar()로 
 1ec:	80 64       	ori	r24, 0x40	; 64
 1ee:	0e 94 a0 00 	call	0x140	; 0x140 <LcdCommand>
 1f2:	c0 e0       	ldi	r28, 0x00	; 0
 1f4:	d0 e0       	ldi	r29, 0x00	; 0
					// 쓰는 문자는 CGRAM에 저장

	for(i=0; i<8; i++)	// 글꼴을 CGRAM에 저장한다.
		LcdPutchar(font[i]);
 1f6:	f8 01       	movw	r30, r16
 1f8:	ec 0f       	add	r30, r28
 1fa:	fd 1f       	adc	r31, r29
 1fc:	80 81       	ld	r24, Z
 1fe:	0e 94 67 00 	call	0xce	; 0xce <LcdPutchar>
	ch |= 0x40;		// 비트6을 세트 => CGRAM 주소설정

	LcdCommand(ch);	// CGRAM 주소설정 =>LcdPutchar()로 
					// 쓰는 문자는 CGRAM에 저장

	for(i=0; i<8; i++)	// 글꼴을 CGRAM에 저장한다.
 202:	21 96       	adiw	r28, 0x01	; 1
 204:	c8 30       	cpi	r28, 0x08	; 8
 206:	d1 05       	cpc	r29, r1
 208:	b1 f7       	brne	.-20     	; 0x1f6 <LcdNewchar+0x1a>
		LcdPutchar(font[i]);
}
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	1f 91       	pop	r17
 210:	0f 91       	pop	r16
 212:	08 95       	ret

00000214 <__vector_5>:
}

///////////////////////////////////////////////////

ISR( INT4_vect )     // 외부인터럽트 4(INT4) 서비스 프로그램
{                    // Echo 신호 펄스폭 측정 및 전방 장애물까지의 거리 계산 
 214:	1f 92       	push	r1
 216:	0f 92       	push	r0
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	0f 92       	push	r0
 21c:	11 24       	eor	r1, r1
 21e:	2f 93       	push	r18
 220:	3f 93       	push	r19
 222:	5f 93       	push	r21
 224:	6f 93       	push	r22
 226:	7f 93       	push	r23
 228:	8f 93       	push	r24
 22a:	9f 93       	push	r25
 22c:	af 93       	push	r26
 22e:	bf 93       	push	r27

    static unsigned short  count1 = 0, count2 = 0, del_T = 0, flag = 0 ;

    if( flag == 0 )            // Echo 신호1의 상승에지에서 인터럽트 걸릴 때 
 230:	80 91 3a 02 	lds	r24, 0x023A
 234:	90 91 3b 02 	lds	r25, 0x023B
 238:	00 97       	sbiw	r24, 0x00	; 0
 23a:	79 f4       	brne	.+30     	; 0x25a <__vector_5+0x46>
    {
	    count1 = TCNT3;        // 상승에지에서의 카운터레지스터값(TCNT3) 저장 
 23c:	80 91 88 00 	lds	r24, 0x0088
 240:	90 91 89 00 	lds	r25, 0x0089
 244:	90 93 41 02 	sts	0x0241, r25
 248:	80 93 40 02 	sts	0x0240, r24
	    flag = 1;              // flag 변수 1로 설정
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	90 93 3b 02 	sts	0x023B, r25
 254:	80 93 3a 02 	sts	0x023A, r24
 258:	39 c0       	rjmp	.+114    	; 0x2cc <__vector_5+0xb8>
    } 

    else if( flag == 1 )    // Echo 신호1의 하강에지에서 인터럽트 걸릴 때
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	b9 f5       	brne	.+110    	; 0x2cc <__vector_5+0xb8>
    { 
	     count2 = TCNT3;                     // 하강에지에서의 카운터레지스터값(TCNT3) 저장 
 25e:	80 91 88 00 	lds	r24, 0x0088
 262:	90 91 89 00 	lds	r25, 0x0089
 266:	90 93 3f 02 	sts	0x023F, r25
 26a:	80 93 3e 02 	sts	0x023E, r24
	     del_T = ( count2 - count1 ) / 2;    // Echo 신호1 펄스폭의 시간 측정(usec 단위)
 26e:	20 91 40 02 	lds	r18, 0x0240
 272:	30 91 41 02 	lds	r19, 0x0241
 276:	82 1b       	sub	r24, r18
 278:	93 0b       	sbc	r25, r19
 27a:	96 95       	lsr	r25
 27c:	87 95       	ror	r24
 27e:	90 93 3d 02 	sts	0x023D, r25
 282:	80 93 3c 02 	sts	0x023C, r24
    	 distance = del_T / 58;              // 초음파센서모듈1이 측정한 전방 장애물까지의 거리계산(cm 단위)
 286:	6a e3       	ldi	r22, 0x3A	; 58
 288:	70 e0       	ldi	r23, 0x00	; 0
 28a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__udivmodhi4>
 28e:	70 93 37 02 	sts	0x0237, r23
 292:	60 93 36 02 	sts	0x0236, r22

         if( distance > 380 )  distance = distance_prev;  //반사되는 초음파가 검출되지 않을때 직전 거리측정값 사용 
 296:	80 91 36 02 	lds	r24, 0x0236
 29a:	90 91 37 02 	lds	r25, 0x0237
 29e:	8d 57       	subi	r24, 0x7D	; 125
 2a0:	91 40       	sbci	r25, 0x01	; 1
 2a2:	40 f0       	brcs	.+16     	; 0x2b4 <__vector_5+0xa0>
 2a4:	80 91 38 02 	lds	r24, 0x0238
 2a8:	90 91 39 02 	lds	r25, 0x0239
 2ac:	90 93 37 02 	sts	0x0237, r25
 2b0:	80 93 36 02 	sts	0x0236, r24
         distance_prev = distance;                        // 직전 거리측정값 저장 변수 업데이트  
 2b4:	80 91 36 02 	lds	r24, 0x0236
 2b8:	90 91 37 02 	lds	r25, 0x0237
 2bc:	90 93 39 02 	sts	0x0239, r25
 2c0:	80 93 38 02 	sts	0x0238, r24
	     flag = 0;                                        // flag 변수 0으로 설정 
 2c4:	10 92 3b 02 	sts	0x023B, r1
 2c8:	10 92 3a 02 	sts	0x023A, r1
    } 

} 
 2cc:	bf 91       	pop	r27
 2ce:	af 91       	pop	r26
 2d0:	9f 91       	pop	r25
 2d2:	8f 91       	pop	r24
 2d4:	7f 91       	pop	r23
 2d6:	6f 91       	pop	r22
 2d8:	5f 91       	pop	r21
 2da:	3f 91       	pop	r19
 2dc:	2f 91       	pop	r18
 2de:	0f 90       	pop	r0
 2e0:	0f be       	out	0x3f, r0	; 63
 2e2:	0f 90       	pop	r0
 2e4:	1f 90       	pop	r1
 2e6:	18 95       	reti

000002e8 <__vector_18>:


//////  USART0 통신(시리얼통신) 수신완료 인터럽트 서비스 프로그램   ///////

ISR( USART0_RX_vect )      // 107쪽( 또는 108쪽) 표7.2 인터럽트벡터의 매크로 참조
{
 2e8:	1f 92       	push	r1
 2ea:	0f 92       	push	r0
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	0f 92       	push	r0
 2f0:	0b b6       	in	r0, 0x3b	; 59
 2f2:	0f 92       	push	r0
 2f4:	11 24       	eor	r1, r1
 2f6:	8f 93       	push	r24
 2f8:	9f 93       	push	r25
 2fa:	ef 93       	push	r30
 2fc:	ff 93       	push	r31
    static unsigned char r_cnt = 0 ; 


    rdata = UDR0;           // USART0 수신단자(RXD0 핀)로부터 수신된 1바이트 데이터를 전역변수 rdata에 저장
 2fe:	8c b1       	in	r24, 0x0c	; 12
 300:	80 93 19 02 	sts	0x0219, r24
 
    if( rdata != '.' )                   // 수신된 데이터가 마지막 문자를 나타내는 데이터(마침표)가 아니면
 304:	80 91 19 02 	lds	r24, 0x0219
 308:	8e 32       	cpi	r24, 0x2E	; 46
 30a:	91 f0       	breq	.+36     	; 0x330 <__vector_18+0x48>
    {
        SerialPutChar_USART0( rdata );   // Echo : 수신된 문자를 바로 송신하여 수신된 문자가 정확한지 확인 
 30c:	80 91 19 02 	lds	r24, 0x0219
// 한 문자를 송신한다.
///////////////////////////////////////////////////////////

void SerialPutChar_USART0(char ch)
{
	while( !( UCSR0A & 0x20 ) );	 	// 버퍼가 빌 때(새로운 데이터를 송신 가능할때)를 기다림
 310:	5d 9b       	sbis	0x0b, 5	; 11
 312:	fe cf       	rjmp	.-4      	; 0x310 <__vector_18+0x28>
                                        // UCSR0A 레지스터의 데이터레지스터빔( bit5(UDRE) )비트가 
                                        // 1 이 될 때까지 기다림.

  	UDR0 = ch;					        // 버퍼에 문자를 쓴다
 314:	8c b9       	out	0x0c, r24	; 12
    rdata = UDR0;           // USART0 수신단자(RXD0 핀)로부터 수신된 1바이트 데이터를 전역변수 rdata에 저장
 
    if( rdata != '.' )                   // 수신된 데이터가 마지막 문자를 나타내는 데이터(마침표)가 아니면
    {
        SerialPutChar_USART0( rdata );   // Echo : 수신된 문자를 바로 송신하여 수신된 문자가 정확한지 확인 
   	    recv_data[r_cnt] = rdata;        // 수신된 문자를 전역변수(배열)에 저장 
 316:	80 91 35 02 	lds	r24, 0x0235
 31a:	e8 2f       	mov	r30, r24
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	90 91 19 02 	lds	r25, 0x0219
 322:	e6 5e       	subi	r30, 0xE6	; 230
 324:	fd 4f       	sbci	r31, 0xFD	; 253
 326:	90 83       	st	Z, r25
	    r_cnt++;                         // 수신된 문자 바이트수 증가  
 328:	8f 5f       	subi	r24, 0xFF	; 255
 32a:	80 93 35 02 	sts	0x0235, r24
 32e:	11 c0       	rjmp	.+34     	; 0x352 <__vector_18+0x6a>
    }

    else if(  rdata == '.' )             // 수신된 문자가 명령(문자열)의 마지막 문자(마침표) 이면
 330:	80 91 19 02 	lds	r24, 0x0219
 334:	8e 32       	cpi	r24, 0x2E	; 46
 336:	69 f4       	brne	.+26     	; 0x352 <__vector_18+0x6a>
// 한 문자를 송신한다.
///////////////////////////////////////////////////////////

void SerialPutChar_USART0(char ch)
{
	while( !( UCSR0A & 0x20 ) );	 	// 버퍼가 빌 때(새로운 데이터를 송신 가능할때)를 기다림
 338:	5d 9b       	sbis	0x0b, 5	; 11
 33a:	fe cf       	rjmp	.-4      	; 0x338 <__vector_18+0x50>
                                        // UCSR0A 레지스터의 데이터레지스터빔( bit5(UDRE) )비트가 
                                        // 1 이 될 때까지 기다림.

  	UDR0 = ch;					        // 버퍼에 문자를 쓴다
 33c:	8a e0       	ldi	r24, 0x0A	; 10
 33e:	8c b9       	out	0x0c, r24	; 12
    }

    else if(  rdata == '.' )             // 수신된 문자가 명령(문자열)의 마지막 문자(마침표) 이면
    {
        SerialPutChar_USART0('\n');      // 휴대폰으로 데이터 전송시 Line Feed('\n')를 항상 끝에 전송해야함 
        recv_cnt = r_cnt ;               // 수신된 명령(문자열)의 바이트수를 전역변수에 저장
 340:	80 91 35 02 	lds	r24, 0x0235
 344:	80 93 33 02 	sts	0x0233, r24
        r_cnt = 0;                       // 수신된 문자 바이트수를 저장하는 로컬 변수 초기화
 348:	10 92 35 02 	sts	0x0235, r1
        
	    new_recv_flag = 1;      // 스마트폰으로부터 새로운 명령(문자열)이 수신되었음을 나타내는 플래그 변수를 Set
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	80 93 34 02 	sts	0x0234, r24
    }

}
 352:	ff 91       	pop	r31
 354:	ef 91       	pop	r30
 356:	9f 91       	pop	r25
 358:	8f 91       	pop	r24
 35a:	0f 90       	pop	r0
 35c:	0b be       	out	0x3b, r0	; 59
 35e:	0f 90       	pop	r0
 360:	0f be       	out	0x3f, r0	; 63
 362:	0f 90       	pop	r0
 364:	1f 90       	pop	r1
 366:	18 95       	reti

00000368 <init_serial_USART0>:

////////////////////////////////////////////////////////////

void init_serial_USART0( unsigned long brate )    ///  USART0 포트(시리얼통신) 관련 레지스터 설정 함수
{
 368:	9b 01       	movw	r18, r22
 36a:	ac 01       	movw	r20, r24
    unsigned short ubrr = 0;


    ////  USART0 통신 포트 설정 (344쪽 - 351쪽 관련 레지스터와 표 참조 )  //////// 
 
    UCSR0A &= ~0x01;      // 다중 프로세서통신모드 사용 안함. --> bit0=0  
 36c:	58 98       	cbi	0x0b, 0	; 11
                          // 전송속도 배가 모드 사용함. --> bit1=1
                          // UCSR0A = 0b**** **10 --> 
						  // UCSR0A = UCSR0A & ~0b0000 0001 ( ~0x01 ) : 0 설정 
    UCSR0A |=  0x02;	  // UCSR0A = UCSR0A & ~0b0000 0010 ( ~0x02 ) : 1 설정 
 36e:	59 9a       	sbi	0x0b, 1	; 11

    UCSR0B &= ~0x04;      // 문자크기(데이터 전송비트 수 ) = 8비트 --> bit2(UCSZn2)=0 
 370:	52 98       	cbi	0x0a, 2	; 10
                          // 송수신 허용(enable) --> bit4=1, bit3=1                           
                          // UCSR0B = 0b***1 10** --> 
                          // UCSR0B = UCSR0B & ~0b0000 0100 ( ~0x04 ) : 0설정
    UCSR0B |= 0x18;       // UCSR0B = UCSR0B |   0b0001 1000 (  0x18 ) : 1설정
 372:	8a b1       	in	r24, 0x0a	; 10
 374:	88 61       	ori	r24, 0x18	; 24
 376:	8a b9       	out	0x0a, r24	; 10

    UCSR0C &= ~0x78;      // 문자크기(데이터 전송비트 수 ) = 8비트 --> bit2(UCSZn1)=1,  bit1(UCSZn0)=1  
 378:	e5 e9       	ldi	r30, 0x95	; 149
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	80 81       	ld	r24, Z
 37e:	87 78       	andi	r24, 0x87	; 135
 380:	80 83       	st	Z, r24
                          // 정지비트수 = 1비트 사용 --> bit3 = 0   
                          // 비동기 통신모드 선택 --> bit6=0,  패리티체크모드 사용 안함. --> bit5=0, bit4=0 
                          // UCSR0C = 0b*000 011* --> 
                          // UCSR0C = UCSR0C & ~0b0111 1000 ( ~0x78 ) : 0설정
    UCSR0C |= 0x06;       // UCSR0C = UCSR0C |   0b0000 0110 (  0x06 ) : 1설정
 382:	80 81       	ld	r24, Z
 384:	86 60       	ori	r24, 0x06	; 6
 386:	80 83       	st	Z, r24

	// 보레이트 설정 ( 360쪽, 표 17.7 참조 )
    ubrr = (unsigned short) ( CPU_CLOCK_KHZ * 1000UL / ( 8*brate ) - 1 ); 
 388:	63 e0       	ldi	r22, 0x03	; 3
 38a:	22 0f       	add	r18, r18
 38c:	33 1f       	adc	r19, r19
 38e:	44 1f       	adc	r20, r20
 390:	55 1f       	adc	r21, r21
 392:	6a 95       	dec	r22
 394:	d1 f7       	brne	.-12     	; 0x38a <init_serial_USART0+0x22>
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	74 e2       	ldi	r23, 0x24	; 36
 39a:	84 ef       	ldi	r24, 0xF4	; 244
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 20 05 	call	0xa40	; 0xa40 <__udivmodsi4>
 3a2:	21 50       	subi	r18, 0x01	; 1
 3a4:	30 40       	sbci	r19, 0x00	; 0
    UBRR0H = ( unsigned char ) ( ubrr >> 8 );
 3a6:	30 93 90 00 	sts	0x0090, r19
    UBRR0L = ( unsigned char )   ubrr ; 
 3aa:	29 b9       	out	0x09, r18	; 9

    UBRR0H = 0x00;      
    UBRR0L = 207;          // 보레이트(Baud Rate) = 9600 bps로 설정 ( 361쪽, 표 17.8 참조 ) 
****/

}
 3ac:	08 95       	ret

000003ae <SerialPutChar_USART0>:
// 한 문자를 송신한다.
///////////////////////////////////////////////////////////

void SerialPutChar_USART0(char ch)
{
	while( !( UCSR0A & 0x20 ) );	 	// 버퍼가 빌 때(새로운 데이터를 송신 가능할때)를 기다림
 3ae:	5d 9b       	sbis	0x0b, 5	; 11
 3b0:	fe cf       	rjmp	.-4      	; 0x3ae <SerialPutChar_USART0>
                                        // UCSR0A 레지스터의 데이터레지스터빔( bit5(UDRE) )비트가 
                                        // 1 이 될 때까지 기다림.

  	UDR0 = ch;					        // 버퍼에 문자를 쓴다
 3b2:	8c b9       	out	0x0c, r24	; 12
}
 3b4:	08 95       	ret

000003b6 <SerialPutString_USART0>:
// 문자열을 송신한다.
// 입력   : str - 송신한 문자열을 저장할 버퍼의 주소
/////////////////////////////////////////////////////////////////

void SerialPutString_USART0(char *str)
{
 3b6:	fc 01       	movw	r30, r24
 3b8:	04 c0       	rjmp	.+8      	; 0x3c2 <SerialPutString_USART0+0xc>
// 한 문자를 송신한다.
///////////////////////////////////////////////////////////

void SerialPutChar_USART0(char ch)
{
	while( !( UCSR0A & 0x20 ) );	 	// 버퍼가 빌 때(새로운 데이터를 송신 가능할때)를 기다림
 3ba:	5d 9b       	sbis	0x0b, 5	; 11
 3bc:	fe cf       	rjmp	.-4      	; 0x3ba <SerialPutString_USART0+0x4>

void SerialPutString_USART0(char *str)
{
    while(*str != '\0')         // 수신된 문자가 Null 문자( 0x00 )가 아니면 
    {
        SerialPutChar_USART0(*str++);
 3be:	31 96       	adiw	r30, 0x01	; 1
{
	while( !( UCSR0A & 0x20 ) );	 	// 버퍼가 빌 때(새로운 데이터를 송신 가능할때)를 기다림
                                        // UCSR0A 레지스터의 데이터레지스터빔( bit5(UDRE) )비트가 
                                        // 1 이 될 때까지 기다림.

  	UDR0 = ch;					        // 버퍼에 문자를 쓴다
 3c0:	8c b9       	out	0x0c, r24	; 12
// 입력   : str - 송신한 문자열을 저장할 버퍼의 주소
/////////////////////////////////////////////////////////////////

void SerialPutString_USART0(char *str)
{
    while(*str != '\0')         // 수신된 문자가 Null 문자( 0x00 )가 아니면 
 3c2:	80 81       	ld	r24, Z
 3c4:	88 23       	and	r24, r24
 3c6:	c9 f7       	brne	.-14     	; 0x3ba <SerialPutString_USART0+0x4>
    {
        SerialPutChar_USART0(*str++);
    }
}
 3c8:	08 95       	ret

000003ca <DC_Motor1_Run_Fwd>:

void DC_Motor1_Run_Fwd( short duty )   // DC 모터1 정회전 함수 
{
 3ca:	9c 01       	movw	r18, r24
    if( duty > Duty1_Max )     duty = Duty1_Max; // duty 범위를 벗어나면 Duty1_Max로 설정 
 3cc:	80 91 be 01 	lds	r24, 0x01BE
 3d0:	90 91 bf 01 	lds	r25, 0x01BF
 3d4:	82 17       	cp	r24, r18
 3d6:	93 07       	cpc	r25, r19
 3d8:	24 f4       	brge	.+8      	; 0x3e2 <DC_Motor1_Run_Fwd+0x18>
 3da:	20 91 be 01 	lds	r18, 0x01BE
 3de:	30 91 bf 01 	lds	r19, 0x01BF
    duty = ( duty*PWM_Period )/Duty1_Max;        // %단위의 duty 값을 실제 레지스터(OCR1A) 설정 값으로 변환
 3e2:	80 91 17 02 	lds	r24, 0x0217
 3e6:	90 91 18 02 	lds	r25, 0x0218
 3ea:	60 91 be 01 	lds	r22, 0x01BE
 3ee:	70 91 bf 01 	lds	r23, 0x01BF

    PORTA &= ~0x01;      // 회전방향설정(정회전) :   DC모터1 B단자(-) = 0(Low) ( PA0 = 0 )    
 3f2:	d8 98       	cbi	0x1b, 0	; 27
    OCR1A = duty;        // 회전속도(PWM Duty)설정 : DC모터1 A단자(+) = PWM신호(OC1A(PB5))  
 3f4:	ac 01       	movw	r20, r24
 3f6:	24 9f       	mul	r18, r20
 3f8:	c0 01       	movw	r24, r0
 3fa:	25 9f       	mul	r18, r21
 3fc:	90 0d       	add	r25, r0
 3fe:	34 9f       	mul	r19, r20
 400:	90 0d       	add	r25, r0
 402:	11 24       	eor	r1, r1
 404:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__divmodhi4>
 408:	7b bd       	out	0x2b, r23	; 43
 40a:	6a bd       	out	0x2a, r22	; 42
}
 40c:	08 95       	ret

0000040e <DC_Motor1_Run_Rev>:

void DC_Motor1_Run_Rev( short duty )   // DC 모터1 역회전 함수 
{
 40e:	ac 01       	movw	r20, r24
    if( duty > Duty1_Max )     duty = Duty1_Max;  // duty 범위를 벗어나면 Duty1_Max로 설정 
 410:	80 91 be 01 	lds	r24, 0x01BE
 414:	90 91 bf 01 	lds	r25, 0x01BF
 418:	84 17       	cp	r24, r20
 41a:	95 07       	cpc	r25, r21
 41c:	24 f4       	brge	.+8      	; 0x426 <DC_Motor1_Run_Rev+0x18>
 41e:	40 91 be 01 	lds	r20, 0x01BE
 422:	50 91 bf 01 	lds	r21, 0x01BF
    duty = ( duty*PWM_Period )/Duty1_Max;         // %단위의 duty 값을 실제 레지스터(OCR1A) 설정 값으로 변환
 426:	80 91 17 02 	lds	r24, 0x0217
 42a:	90 91 18 02 	lds	r25, 0x0218
 42e:	60 91 be 01 	lds	r22, 0x01BE
 432:	70 91 bf 01 	lds	r23, 0x01BF

    PORTA |= 0x01;               // 회전방향설정(역회전) :     DC모터1 B단자(-) = 1(High) ( PA0 = 1 )    
 436:	d8 9a       	sbi	0x1b, 0	; 27
    OCR1A = PWM_Period - duty;   // 회전속도(PWM Duty)설정 : DC모터1 A단자(+) = PWM신호(OC1A(PB5))  
 438:	20 91 17 02 	lds	r18, 0x0217
 43c:	30 91 18 02 	lds	r19, 0x0218
 440:	fc 01       	movw	r30, r24
 442:	4e 9f       	mul	r20, r30
 444:	c0 01       	movw	r24, r0
 446:	4f 9f       	mul	r20, r31
 448:	90 0d       	add	r25, r0
 44a:	5e 9f       	mul	r21, r30
 44c:	90 0d       	add	r25, r0
 44e:	11 24       	eor	r1, r1
 450:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__divmodhi4>
 454:	26 1b       	sub	r18, r22
 456:	37 0b       	sbc	r19, r23
 458:	3b bd       	out	0x2b, r19	; 43
 45a:	2a bd       	out	0x2a, r18	; 42
}
 45c:	08 95       	ret

0000045e <DC_Motor1_Stop>:

void DC_Motor1_Stop( void )   // DC 모터1 정지 함수 
{
    PORTA &= ~0x01;     // 회전방향설정(정회전) :            DC모터1 B단자(-) = 0(Low) ( PA0 = 0 )    
 45e:	d8 98       	cbi	0x1b, 0	; 27
    OCR1A = 0;           // 회전속도 0(PWM Duty = 0) 설정 : DC모터1 A단자(+) = PWM신호(OC1A(PB5))  
 460:	1b bc       	out	0x2b, r1	; 43
 462:	1a bc       	out	0x2a, r1	; 42
}
 464:	08 95       	ret

00000466 <ADC_enable>:

void   ADC_enable(void)         // ADC( AD변환기 ) 관련 레지스터 설정 함수 
{
    //////  (교재 pp321-322 레제스터 ADMUX 그림, 표15.1, 표15.2 참조)
    ADMUX &= ~0xE0;          // 기준전압선택( AREF ), ADC결과 오른쪽 정렬 
 466:	87 b1       	in	r24, 0x07	; 7
 468:	8f 71       	andi	r24, 0x1F	; 31
 46a:	87 b9       	out	0x07, r24	; 7
                             // ADMUX = 0b000* ****  
                             // ADMUX = ADMUX & ~0b1110 0000( ~0xE0 ) 
    //////  (교재 pp323-324 레제스터 ADCSRA 그림, 표15.3 참조)
    ADCSRA |= 0x87;     // ADC 가능(enable), 프리스케일러(Prescaler) 선택: 128 분주
 46c:	86 b1       	in	r24, 0x06	; 6
 46e:	87 68       	ori	r24, 0x87	; 135
 470:	86 b9       	out	0x06, r24	; 6
                        // ADCSRA = 0b1*** *111
                        // ADCSRA = ADCSRA | 0b1000 0111( 0x87 ) 
}
 472:	08 95       	ret

00000474 <ADC_Read>:
{                                                //  값을 읽은 후 그 값을 리턴하는 함수 
       unsigned short ad_result  = 0 ;

       if( ch > 7 )  ch = 7;         // ADC 채널은 0 - 7 이므로 범위를 벗어나는 것은 채널 7로 설정

       ADMUX &= ~0x1F;              // ADC 채널 리셋 
 474:	97 b1       	in	r25, 0x07	; 7
 476:	90 7e       	andi	r25, 0xE0	; 224
 478:	97 b9       	out	0x07, r25	; 7
       ADMUX |=  ch;                // ADC 채널(ch) 선택
 47a:	97 b1       	in	r25, 0x07	; 7
 47c:	88 30       	cpi	r24, 0x08	; 8
 47e:	08 f0       	brcs	.+2      	; 0x482 <ADC_Read+0xe>
 480:	87 e0       	ldi	r24, 0x07	; 7
 482:	98 2b       	or	r25, r24
 484:	97 b9       	out	0x07, r25	; 7
       ADCSRA |= 0x40;              // AD 변환 시작 ( ADCSRA 레지스터 bit6 = 1 )
 486:	36 9a       	sbi	0x06, 6	; 6
       while( !( ADCSRA & 0x10) );  // AD 변환이 완료될 때까지 기다림. 
 488:	34 9b       	sbis	0x06, 4	; 6
 48a:	fe cf       	rjmp	.-4      	; 0x488 <ADC_Read+0x14>
       ADCSRA |= 0x10;              // ADCSRA 레지스터의 ADC 인터럽트 플래그비트(ADIF, bit4) 지움.
 48c:	34 9a       	sbi	0x06, 4	; 6
       ad_result = ADC;             // AD 변환 완료된 디지털 값( 레지스터 ADC )을 변수에 저장  
 48e:	24 b1       	in	r18, 0x04	; 4
 490:	35 b1       	in	r19, 0x05	; 5

       return  ad_result;
}
 492:	c9 01       	movw	r24, r18
 494:	08 95       	ret

00000496 <__vector_16>:
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////


ISR( TIMER0_OVF_vect )      //  10 msec 주기의 타이머0 오버플로 인터럽트 서비스프로그램
{                           //  샘플링주기 100msec 마다 CDS센서(조도센서, ADC2채널)값 검출 
 496:	1f 92       	push	r1
 498:	0f 92       	push	r0
 49a:	0f b6       	in	r0, 0x3f	; 63
 49c:	0f 92       	push	r0
 49e:	0b b6       	in	r0, 0x3b	; 59
 4a0:	0f 92       	push	r0
 4a2:	11 24       	eor	r1, r1
 4a4:	2f 93       	push	r18
 4a6:	3f 93       	push	r19
 4a8:	4f 93       	push	r20
 4aa:	5f 93       	push	r21
 4ac:	6f 93       	push	r22
 4ae:	7f 93       	push	r23
 4b0:	8f 93       	push	r24
 4b2:	9f 93       	push	r25
 4b4:	af 93       	push	r26
 4b6:	bf 93       	push	r27
 4b8:	ef 93       	push	r30
 4ba:	ff 93       	push	r31
                            //  50msec 마다 초음파신호 발사 신호(트리거 신호) 출력

    static unsigned short  time_index_1 = 0, time_index_2 = 0 ; 

    TCNT0 = 256 - 156;     //  내부클럭주기 = 1024/ (16x10^6) = 64 usec,  
 4bc:	84 e6       	ldi	r24, 0x64	; 100
 4be:	82 bf       	out	0x32, r24	; 50
                           //  오버플로인터럽트 주기 = 10msec
                           //  156 = 10msec/ 64usec,  TCNT0 = 256 - 156
    time_index_1++; 
 4c0:	80 91 46 02 	lds	r24, 0x0246
 4c4:	90 91 47 02 	lds	r25, 0x0247
 4c8:	01 96       	adiw	r24, 0x01	; 1
 4ca:	90 93 47 02 	sts	0x0247, r25
 4ce:	80 93 46 02 	sts	0x0246, r24

    if( time_index_1 == 10 )    // 샘플링주기 100msec(= 10 x 10msec ) 마다 광량(조도) 검출 
 4d2:	0a 97       	sbiw	r24, 0x0a	; 10
 4d4:	59 f4       	brne	.+22     	; 0x4ec <__vector_16+0x56>
    { 
        time_index_1 = 0;       // 변수 초기화 
 4d6:	10 92 47 02 	sts	0x0247, r1
 4da:	10 92 46 02 	sts	0x0246, r1

         /////////////   조도센서(CDS센서)신호(ADC2) 검출(AD변환)  //////////////// 

         CDS_adc_value = ADC_Read( 2 );  // ADC 채널 2의 AD 변환된 디지털 값을 읽은 후 전역변수에 저장  
 4de:	82 e0       	ldi	r24, 0x02	; 2
 4e0:	0e 94 3a 02 	call	0x474	; 0x474 <ADC_Read>
 4e4:	90 93 43 02 	sts	0x0243, r25
 4e8:	80 93 42 02 	sts	0x0242, r24
    }

    time_index_2++ ;  
 4ec:	80 91 44 02 	lds	r24, 0x0244
 4f0:	90 91 45 02 	lds	r25, 0x0245
 4f4:	01 96       	adiw	r24, 0x01	; 1
 4f6:	90 93 45 02 	sts	0x0245, r25
 4fa:	80 93 44 02 	sts	0x0244, r24

    if( time_index_2 == 5 )   // 50 msec (=10msec * 5) 마다 초음파 트리거신호 발생(초음파를 전방으로 발사)
 4fe:	05 97       	sbiw	r24, 0x05	; 5
 500:	71 f4       	brne	.+28     	; 0x51e <__vector_16+0x88>
    {
         time_index_2 = 0;    // 초기화
 502:	10 92 45 02 	sts	0x0245, r1
 506:	10 92 44 02 	sts	0x0244, r1

         // 트리거신호(PA1 포트) 발생
	     PORTA |= 0x02;      // PA1 : High
 50a:	d9 9a       	sbi	0x1b, 1	; 27
 50c:	84 e1       	ldi	r24, 0x14	; 20
 50e:	90 e0       	ldi	r25, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 510:	35 e0       	ldi	r19, 0x05	; 5
 512:	23 2f       	mov	r18, r19
 514:	2a 95       	dec	r18
 516:	f1 f7       	brne	.-4      	; 0x514 <__vector_16+0x7e>
		_delay_ms(1);		     // 1msec 시간 지연
}

void usec_delay(int n)            // n usec 만큼의 시간지연 발생 함수 
{	
	for(; n>0; n--)		          // 1usec 시간 지연을 n회 반복
 518:	01 97       	sbiw	r24, 0x01	; 1
 51a:	d9 f7       	brne	.-10     	; 0x512 <__vector_16+0x7c>
         time_index_2 = 0;    // 초기화

         // 트리거신호(PA1 포트) 발생
	     PORTA |= 0x02;      // PA1 : High
	     usec_delay(20) ;      // 20usec 동안 High 유지 
	     PORTA &= ~0x02;    // PA1 : Low   
 51c:	d9 98       	cbi	0x1b, 1	; 27
    }

}
 51e:	ff 91       	pop	r31
 520:	ef 91       	pop	r30
 522:	bf 91       	pop	r27
 524:	af 91       	pop	r26
 526:	9f 91       	pop	r25
 528:	8f 91       	pop	r24
 52a:	7f 91       	pop	r23
 52c:	6f 91       	pop	r22
 52e:	5f 91       	pop	r21
 530:	4f 91       	pop	r20
 532:	3f 91       	pop	r19
 534:	2f 91       	pop	r18
 536:	0f 90       	pop	r0
 538:	0b be       	out	0x3b, r0	; 59
 53a:	0f 90       	pop	r0
 53c:	0f be       	out	0x3f, r0	; 63
 53e:	0f 90       	pop	r0
 540:	1f 90       	pop	r1
 542:	18 95       	reti

00000544 <HexToDec>:
      if( digit >= 3)  LcdPutchar(NumToAsc(cnumber[2]));    // 100자리 디스플레이 
      if( digit >= 2)  LcdPutchar(NumToAsc(cnumber[1]));    // 10자리 디스플레이
      if( digit >= 1)  LcdPutchar(NumToAsc(cnumber[0]));    // 1자리 디스플레이
}
void HexToDec( unsigned short num, unsigned short radix)   // num으로 넘어온 16진수 형태의 데이터를 10진수로 
{                                                          //  변환하여 각각의 자릿수를 전역변수 배열 cnumber[0](1자리) - cnumber[4](10000자리)에 저장하는 함수. 
 544:	0f 93       	push	r16
 546:	1f 93       	push	r17
 548:	cf 93       	push	r28
 54a:	df 93       	push	r29
 54c:	9c 01       	movw	r18, r24
 54e:	8b 01       	movw	r16, r22

	int j ;

	for(j=0; j<5 ; j++) cnumber[j] = 0 ;
 550:	10 92 12 02 	sts	0x0212, r1
 554:	10 92 13 02 	sts	0x0213, r1
 558:	10 92 14 02 	sts	0x0214, r1
 55c:	10 92 15 02 	sts	0x0215, r1
 560:	10 92 16 02 	sts	0x0216, r1
 564:	c0 e0       	ldi	r28, 0x00	; 0
 566:	d0 e0       	ldi	r29, 0x00	; 0
	j=0;
	do
	{
		cnumber[j++] = num % radix ; 
 568:	c9 01       	movw	r24, r18
 56a:	b8 01       	movw	r22, r16
 56c:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__udivmodhi4>
 570:	fe 01       	movw	r30, r28
 572:	ee 5e       	subi	r30, 0xEE	; 238
 574:	fd 4f       	sbci	r31, 0xFD	; 253
 576:	80 83       	st	Z, r24
 578:	21 96       	adiw	r28, 0x01	; 1
		num /= radix; 
 57a:	c9 01       	movw	r24, r18
 57c:	b8 01       	movw	r22, r16
 57e:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__udivmodhi4>
 582:	9b 01       	movw	r18, r22
	} while(num);
 584:	61 15       	cp	r22, r1
 586:	71 05       	cpc	r23, r1
 588:	79 f7       	brne	.-34     	; 0x568 <HexToDec+0x24>
} 
 58a:	df 91       	pop	r29
 58c:	cf 91       	pop	r28
 58e:	1f 91       	pop	r17
 590:	0f 91       	pop	r16
 592:	08 95       	ret

00000594 <NumToAsc>:

char NumToAsc( unsigned char Num )       // Num으로 넘어온 16진수 1자리 숫자를 문자데이터(ASCII 코드)로 
{                                        // 변환하여 리턴하는 함수
	if( Num <10 ) Num += 0x30; 
 594:	8a 30       	cpi	r24, 0x0A	; 10
 596:	10 f4       	brcc	.+4      	; 0x59c <NumToAsc+0x8>
 598:	80 5d       	subi	r24, 0xD0	; 208
 59a:	08 95       	ret
	else          Num += 0x37; 
 59c:	89 5c       	subi	r24, 0xC9	; 201

	return Num ;
}
 59e:	08 95       	ret

000005a0 <msec_delay>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 5a0:	20 ea       	ldi	r18, 0xA0	; 160
 5a2:	3f e0       	ldi	r19, 0x0F	; 15
 5a4:	04 c0       	rjmp	.+8      	; 0x5ae <msec_delay+0xe>
 5a6:	f9 01       	movw	r30, r18
 5a8:	31 97       	sbiw	r30, 0x01	; 1
 5aa:	f1 f7       	brne	.-4      	; 0x5a8 <msec_delay+0x8>

void msec_delay(int n)           // n msec 만큼의 시간지연 발생 함수 
{	
	for(; n>0; n--)		         // 1msec 시간 지연을 n회 반복
 5ac:	01 97       	sbiw	r24, 0x01	; 1
 5ae:	18 16       	cp	r1, r24
 5b0:	19 06       	cpc	r1, r25
 5b2:	cc f3       	brlt	.-14     	; 0x5a6 <msec_delay+0x6>
		_delay_ms(1);		     // 1msec 시간 지연
}
 5b4:	08 95       	ret

000005b6 <usec_delay>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 5b6:	35 e0       	ldi	r19, 0x05	; 5
 5b8:	04 c0       	rjmp	.+8      	; 0x5c2 <usec_delay+0xc>
 5ba:	23 2f       	mov	r18, r19
 5bc:	2a 95       	dec	r18
 5be:	f1 f7       	brne	.-4      	; 0x5bc <usec_delay+0x6>

void usec_delay(int n)            // n usec 만큼의 시간지연 발생 함수 
{	
	for(; n>0; n--)		          // 1usec 시간 지연을 n회 반복
 5c0:	01 97       	sbiw	r24, 0x01	; 1
 5c2:	18 16       	cp	r1, r24
 5c4:	19 06       	cpc	r1, r25
 5c6:	cc f3       	brlt	.-14     	; 0x5ba <usec_delay+0x4>
		_delay_us(1);		      // 1usec 시간 지연
}
 5c8:	08 95       	ret

000005ca <Display_Number_LCD>:
}

/////////////////////////////////////////////////////////

void Display_Number_LCD( unsigned short num, unsigned char digit ) //부호없는 정수형변수(num)을 10진수 형태로 
{                                                       // 정해진 자릿수(digit) 만큼 LCD 에 디스플레이 하는 함수 
 5ca:	1f 93       	push	r17
 5cc:	16 2f       	mov	r17, r22
      HexToDec( num, 10); //10진수로 변환
 5ce:	6a e0       	ldi	r22, 0x0A	; 10
 5d0:	70 e0       	ldi	r23, 0x00	; 0
 5d2:	0e 94 a2 02 	call	0x544	; 0x544 <HexToDec>

      if( digit < 1 )     digit = 1 ;
 5d6:	11 23       	and	r17, r17
 5d8:	81 f1       	breq	.+96     	; 0x63a <Display_Number_LCD+0x70>
      if( digit > 5 )     digit = 5 ;
 5da:	16 30       	cpi	r17, 0x06	; 6
 5dc:	10 f0       	brcs	.+4      	; 0x5e2 <Display_Number_LCD+0x18>
 5de:	15 e0       	ldi	r17, 0x05	; 5
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <Display_Number_LCD+0x1c>

      if( digit >= 5)  LcdPutchar(NumToAsc(cnumber[4]));    // 10000자리 디스플레이 
 5e2:	15 30       	cpi	r17, 0x05	; 5
 5e4:	49 f4       	brne	.+18     	; 0x5f8 <Display_Number_LCD+0x2e>
 5e6:	80 91 16 02 	lds	r24, 0x0216
	} while(num);
} 

char NumToAsc( unsigned char Num )       // Num으로 넘어온 16진수 1자리 숫자를 문자데이터(ASCII 코드)로 
{                                        // 변환하여 리턴하는 함수
	if( Num <10 ) Num += 0x30; 
 5ea:	8a 30       	cpi	r24, 0x0A	; 10
 5ec:	10 f4       	brcc	.+4      	; 0x5f2 <Display_Number_LCD+0x28>
 5ee:	80 5d       	subi	r24, 0xD0	; 208
 5f0:	01 c0       	rjmp	.+2      	; 0x5f4 <Display_Number_LCD+0x2a>
	else          Num += 0x37; 
 5f2:	89 5c       	subi	r24, 0xC9	; 201
      HexToDec( num, 10); //10진수로 변환

      if( digit < 1 )     digit = 1 ;
      if( digit > 5 )     digit = 5 ;

      if( digit >= 5)  LcdPutchar(NumToAsc(cnumber[4]));    // 10000자리 디스플레이 
 5f4:	0e 94 67 00 	call	0xce	; 0xce <LcdPutchar>
      if( digit >= 4)  LcdPutchar(NumToAsc(cnumber[3]));    // 1000자리 디스플레이 
 5f8:	14 30       	cpi	r17, 0x04	; 4
 5fa:	48 f0       	brcs	.+18     	; 0x60e <Display_Number_LCD+0x44>
 5fc:	80 91 15 02 	lds	r24, 0x0215
	} while(num);
} 

char NumToAsc( unsigned char Num )       // Num으로 넘어온 16진수 1자리 숫자를 문자데이터(ASCII 코드)로 
{                                        // 변환하여 리턴하는 함수
	if( Num <10 ) Num += 0x30; 
 600:	8a 30       	cpi	r24, 0x0A	; 10
 602:	10 f4       	brcc	.+4      	; 0x608 <Display_Number_LCD+0x3e>
 604:	80 5d       	subi	r24, 0xD0	; 208
 606:	01 c0       	rjmp	.+2      	; 0x60a <Display_Number_LCD+0x40>
	else          Num += 0x37; 
 608:	89 5c       	subi	r24, 0xC9	; 201

      if( digit < 1 )     digit = 1 ;
      if( digit > 5 )     digit = 5 ;

      if( digit >= 5)  LcdPutchar(NumToAsc(cnumber[4]));    // 10000자리 디스플레이 
      if( digit >= 4)  LcdPutchar(NumToAsc(cnumber[3]));    // 1000자리 디스플레이 
 60a:	0e 94 67 00 	call	0xce	; 0xce <LcdPutchar>
      if( digit >= 3)  LcdPutchar(NumToAsc(cnumber[2]));    // 100자리 디스플레이 
 60e:	13 30       	cpi	r17, 0x03	; 3
 610:	48 f0       	brcs	.+18     	; 0x624 <Display_Number_LCD+0x5a>
 612:	80 91 14 02 	lds	r24, 0x0214
	} while(num);
} 

char NumToAsc( unsigned char Num )       // Num으로 넘어온 16진수 1자리 숫자를 문자데이터(ASCII 코드)로 
{                                        // 변환하여 리턴하는 함수
	if( Num <10 ) Num += 0x30; 
 616:	8a 30       	cpi	r24, 0x0A	; 10
 618:	10 f4       	brcc	.+4      	; 0x61e <Display_Number_LCD+0x54>
 61a:	80 5d       	subi	r24, 0xD0	; 208
 61c:	01 c0       	rjmp	.+2      	; 0x620 <Display_Number_LCD+0x56>
	else          Num += 0x37; 
 61e:	89 5c       	subi	r24, 0xC9	; 201
      if( digit < 1 )     digit = 1 ;
      if( digit > 5 )     digit = 5 ;

      if( digit >= 5)  LcdPutchar(NumToAsc(cnumber[4]));    // 10000자리 디스플레이 
      if( digit >= 4)  LcdPutchar(NumToAsc(cnumber[3]));    // 1000자리 디스플레이 
      if( digit >= 3)  LcdPutchar(NumToAsc(cnumber[2]));    // 100자리 디스플레이 
 620:	0e 94 67 00 	call	0xce	; 0xce <LcdPutchar>
      if( digit >= 2)  LcdPutchar(NumToAsc(cnumber[1]));    // 10자리 디스플레이
 624:	11 30       	cpi	r17, 0x01	; 1
 626:	49 f0       	breq	.+18     	; 0x63a <Display_Number_LCD+0x70>
 628:	80 91 13 02 	lds	r24, 0x0213
	} while(num);
} 

char NumToAsc( unsigned char Num )       // Num으로 넘어온 16진수 1자리 숫자를 문자데이터(ASCII 코드)로 
{                                        // 변환하여 리턴하는 함수
	if( Num <10 ) Num += 0x30; 
 62c:	8a 30       	cpi	r24, 0x0A	; 10
 62e:	10 f4       	brcc	.+4      	; 0x634 <Display_Number_LCD+0x6a>
 630:	80 5d       	subi	r24, 0xD0	; 208
 632:	01 c0       	rjmp	.+2      	; 0x636 <Display_Number_LCD+0x6c>
	else          Num += 0x37; 
 634:	89 5c       	subi	r24, 0xC9	; 201
      if( digit > 5 )     digit = 5 ;

      if( digit >= 5)  LcdPutchar(NumToAsc(cnumber[4]));    // 10000자리 디스플레이 
      if( digit >= 4)  LcdPutchar(NumToAsc(cnumber[3]));    // 1000자리 디스플레이 
      if( digit >= 3)  LcdPutchar(NumToAsc(cnumber[2]));    // 100자리 디스플레이 
      if( digit >= 2)  LcdPutchar(NumToAsc(cnumber[1]));    // 10자리 디스플레이
 636:	0e 94 67 00 	call	0xce	; 0xce <LcdPutchar>
      if( digit >= 1)  LcdPutchar(NumToAsc(cnumber[0]));    // 1자리 디스플레이
 63a:	80 91 12 02 	lds	r24, 0x0212
	} while(num);
} 

char NumToAsc( unsigned char Num )       // Num으로 넘어온 16진수 1자리 숫자를 문자데이터(ASCII 코드)로 
{                                        // 변환하여 리턴하는 함수
	if( Num <10 ) Num += 0x30; 
 63e:	8a 30       	cpi	r24, 0x0A	; 10
 640:	10 f4       	brcc	.+4      	; 0x646 <Display_Number_LCD+0x7c>
 642:	80 5d       	subi	r24, 0xD0	; 208
 644:	01 c0       	rjmp	.+2      	; 0x648 <Display_Number_LCD+0x7e>
	else          Num += 0x37; 
 646:	89 5c       	subi	r24, 0xC9	; 201

      if( digit >= 5)  LcdPutchar(NumToAsc(cnumber[4]));    // 10000자리 디스플레이 
      if( digit >= 4)  LcdPutchar(NumToAsc(cnumber[3]));    // 1000자리 디스플레이 
      if( digit >= 3)  LcdPutchar(NumToAsc(cnumber[2]));    // 100자리 디스플레이 
      if( digit >= 2)  LcdPutchar(NumToAsc(cnumber[1]));    // 10자리 디스플레이
      if( digit >= 1)  LcdPutchar(NumToAsc(cnumber[0]));    // 1자리 디스플레이
 648:	0e 94 67 00 	call	0xce	; 0xce <LcdPutchar>
}
 64c:	1f 91       	pop	r17
 64e:	08 95       	ret

00000650 <main>:

static volatile  char  rdata = 0,  recv_cnt = 0, new_recv_flag = 0  ;                
static volatile  char  recv_data[25] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};  

int main() 
{   
 650:	cf 92       	push	r12
 652:	df 92       	push	r13
 654:	ef 92       	push	r14
 656:	ff 92       	push	r15
 658:	0f 93       	push	r16
 65a:	1f 93       	push	r17
 65c:	cf 93       	push	r28
 65e:	df 93       	push	r29
    char   cmd_data = 0xFF  ;  
    unsigned  char   i = 0 ;   	
    unsigned short   Distance_UltraSonic =0, CDS_Value =0;


    LcdInit();                      // LCD 초기화 함수 호출
 660:	0e 94 c7 00 	call	0x18e	; 0x18e <LcdInit>

    LcdMove(0,0);                   // LCD에 쓸 데이터 초기 위치 설정( 0행 0열)
 664:	80 e0       	ldi	r24, 0x00	; 0
 666:	60 e0       	ldi	r22, 0x00	; 0
 668:	0e 94 bd 00 	call	0x17a	; 0x17a <LcdMove>
    LcdPuts("Bluetooth Prog");      // LCD에 블루투스 테스트 메시지 디스플레이 
 66c:	80 e0       	ldi	r24, 0x00	; 0
 66e:	91 e0       	ldi	r25, 0x01	; 1
 670:	0e 94 83 00 	call	0x106	; 0x106 <LcdPuts>
    LcdMove(1,0);                   // LCD에 쓸 데이터 초기 위치 설정( 1행 0열)   
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	60 e0       	ldi	r22, 0x00	; 0
 678:	0e 94 bd 00 	call	0x17a	; 0x17a <LcdMove>
    LcdPuts("Send Command.");       // LCD에 블루투스 테스트 메시지 디스플레이
 67c:	8f e0       	ldi	r24, 0x0F	; 15
 67e:	91 e0       	ldi	r25, 0x01	; 1
 680:	0e 94 83 00 	call	0x106	; 0x106 <LcdPuts>
 684:	88 ee       	ldi	r24, 0xE8	; 232
 686:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 688:	20 ea       	ldi	r18, 0xA0	; 160
 68a:	3f e0       	ldi	r19, 0x0F	; 15
 68c:	f9 01       	movw	r30, r18
 68e:	31 97       	sbiw	r30, 0x01	; 1
 690:	f1 f7       	brne	.-4      	; 0x68e <main+0x3e>
	return Num ;
}

void msec_delay(int n)           // n msec 만큼의 시간지연 발생 함수 
{	
	for(; n>0; n--)		         // 1msec 시간 지연을 n회 반복
 692:	01 97       	sbiw	r24, 0x01	; 1
 694:	d9 f7       	brne	.-10     	; 0x68c <main+0x3c>
    msec_delay(1000);               // 1초(1000msec) 시간지연

  //  LED1( 블루투스통신 테스트 용)(PA2) : 출력포트로 설정 
  //  출력 포트 설정 	   (교재 pp75-76 레지스터그림, 표6.1 참조)   
   
    DDRA |= 0x04;      // LED1( 블루투스통신 테스트 용)(PA2) : 출력포트로 설정                         
 696:	d2 9a       	sbi	0x1a, 2	; 26
                       // DDRA = 0b**** *1**, DDRA = DDRA | 0b0000 0100( 0x04 )  : 1설정 
    PORTA |= 0x04;     // 초기에 LED1 OFF :  PA2 = 1 출력                        
 698:	da 9a       	sbi	0x1b, 2	; 27
                       // PORTA = 0b**** *1**, PORTA = PORTA | 0b0000 0100( 0x04 ) 

   //// 초음파센서모듈(HC-SR04) 1개 구동을 위한 HW 관련 레지스터 설정  ////////////
   //  출력 포트 설정 	   (교재 pp75-76 레지스터그림, 표6.1 참조)

    DDRA |= 0x02;      // 1개의 초음파센서 트리거 신호( 트리거신호1 : PA1 ) : 출력포트 설정. 
 69a:	d1 9a       	sbi	0x1a, 1	; 26
                       // DDRA = 0b**** **1*, DDRA = DDRA | 0b0000 0010( 0x02 ) : 1설정  
    PORTA &= ~0x02;    // PA1 : Low  ( Trigger 신호 OFF )  
 69c:	d9 98       	cbi	0x1b, 1	; 27
                       // PORTA = 0b**** **0*, PORTA = PORTA & ~0b0000 0010( ~0x02 ) : 0설정

   ////////  CDS센서(조도센서, ADC2(PF2)) 구동을 위한 HW 관련 레지스터 설정  ////////////
   //  입력 포트 설정 	   (교재 pp75-76 레지스터그림, 표6.1 참조) 

    DDRF &= ~0x04;      // 조도센서출력신호 v? 연결핀 ( ADC2(PF2) : 입력포트 설정 )  
 69e:	80 91 61 00 	lds	r24, 0x0061
 6a2:	8b 7f       	andi	r24, 0xFB	; 251
 6a4:	80 93 61 00 	sts	0x0061, r24
                        // 입력포트 설정.  DDRF = 0b**** *0**, DDRF = DDRF & ~0b0000 0100(~0x04) : 0설정 

   ////////  DC모터1 구동을 위한 HW 관련 레지스터 설정  ////////////
   //  출력 포트 설정 	   (교재 pp75-76 레지스터그림, 표6.1 참조) 

    DDRA |= 0x01;       // DC모터1 방향제어포트(PA0) : 출력포트로 설정   
 6a8:	d0 9a       	sbi	0x1a, 0	; 26
                        // DDRA = 0b**** ***1, DDRA = DDRA | 0b0000 0001( 0x01 )
    DDRB |= 0x20;       // DC모터1 속도제어 PWM포트(OC1A/PB5) : 출력포트로 설정   
 6aa:	bd 9a       	sbi	0x17, 5	; 23

   /////////////  Timer1 설정( DC모터 PWM신호(OC1A/PB5) 발생 )   //////////// 
   ////////////   PWM신호 주파수 = 5kHz (주기 = 200usec )  //////////////////////
   /////// 교재 P238-245(레지스터 그림과 표12.2, 표12.4, 표12.5) 참조    

    TCCR1A &= ~0x41;  // Fast PWM: 비교일치시 OC1A(PB5)) 핀에 0을 출력하고 TOP에서 1을 출력
 6ac:	8f b5       	in	r24, 0x2f	; 47
 6ae:	8e 7b       	andi	r24, 0xBE	; 190
 6b0:	8f bd       	out	0x2f, r24	; 47
                         // (표12.2 참조),   Fast PWM ( mode 14 ) 설정 (표12.4 참조)
                         // TCCR1A = 0b10** **10 
                         // TCCR1A = TCCR1A & ~0b0100 0001(~0x41 )  : 0출력
    TCCR1A |= 0x82;      // TCCR1A = TCCR1A |   0b1000 0010( 0x82 )  : 1출력
 6b2:	8f b5       	in	r24, 0x2f	; 47
 6b4:	82 68       	ori	r24, 0x82	; 130
 6b6:	8f bd       	out	0x2f, r24	; 47

    TCCR1B &= ~0x04;     // 64분주 타이머1 시작(내부클럭 주기=64/(16*10^6Hz)=4usec ), Fast PWM(mode 14)설정
 6b8:	8e b5       	in	r24, 0x2e	; 46
 6ba:	8b 7f       	andi	r24, 0xFB	; 251
 6bc:	8e bd       	out	0x2e, r24	; 46
                         // (표12.4 - 표12.5 참조)
                         // TCCR1B = 0b***1 1011   
                         // TCCR1B = TCCR1B & ~0b0000 0100(~0x04 )  
    TCCR1B |= 0x1B;      // TCCR1B = TCCR1B |   0b0001 1011( 0x1B )  
 6be:	8e b5       	in	r24, 0x2e	; 46
 6c0:	8b 61       	ori	r24, 0x1B	; 27
 6c2:	8e bd       	out	0x2e, r24	; 46

    ICR1 = 50;           // PWM 주기(주파수) 설정( 주기= 50*4usec = 200usec, 주파수 = 1/(200usec) = 5kHz )
 6c4:	82 e3       	ldi	r24, 0x32	; 50
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	97 bd       	out	0x27, r25	; 39
 6ca:	86 bd       	out	0x26, r24	; 38
    PWM_Period = ICR1;   // PWM 신호 주기를 전역변수에 저장 
 6cc:	86 b5       	in	r24, 0x26	; 38
 6ce:	97 b5       	in	r25, 0x27	; 39
 6d0:	90 93 18 02 	sts	0x0218, r25
 6d4:	80 93 17 02 	sts	0x0217, r24
    OCR1A = PWM_Period - duty;   // 회전속도(PWM Duty)설정 : DC모터1 A단자(+) = PWM신호(OC1A(PB5))  
}

void DC_Motor1_Stop( void )   // DC 모터1 정지 함수 
{
    PORTA &= ~0x01;     // 회전방향설정(정회전) :            DC모터1 B단자(-) = 0(Low) ( PA0 = 0 )    
 6d8:	d8 98       	cbi	0x1b, 0	; 27
    OCR1A = 0;           // 회전속도 0(PWM Duty = 0) 설정 : DC모터1 A단자(+) = PWM신호(OC1A(PB5))  
 6da:	1b bc       	out	0x2b, r1	; 43
 6dc:	1a bc       	out	0x2a, r1	; 42
    DC_Motor1_Stop( );   // DC모터1 정지

   ////////////  Timer 0 설정  ( 10 msec 주기의 타이머0 오버플로 인터럽트 설정 )  ///////////////
   // 교재 P133-137(레지스터 그림과 표8.1-표8.5) 참조    

    TCCR0 &= ~0x48;       // Normal mode(타이머모드), 타이머 0 시작(1024분주 사용)
 6de:	83 b7       	in	r24, 0x33	; 51
 6e0:	87 7b       	andi	r24, 0xB7	; 183
 6e2:	83 bf       	out	0x33, r24	; 51
                          // TCCR0 = 0b*0**0111 
                          // TCCR0 =TCCR0 & ~0b01001000(~0x48 )  
    TCCR0 |= 0x07;        // TCCR0 =TCCR0 | 0b00000111( 0x07 )  
 6e4:	83 b7       	in	r24, 0x33	; 51
 6e6:	87 60       	ori	r24, 0x07	; 7
 6e8:	83 bf       	out	0x33, r24	; 51
    TCNT0 = 256 - 156;    // 내부클럭주기 = 1024/ (16x10^6) = 64 usec,  
 6ea:	84 e6       	ldi	r24, 0x64	; 100
 6ec:	82 bf       	out	0x32, r24	; 50
                          // 오버플로인터럽트 주기 = 10msec
                          // 156 = 10msec/ 64usec,  TCNT0 = 256 - 156
    TIMSK |= 0x01;        // 타이머0 오버플로 인터럽트 허용
 6ee:	87 b7       	in	r24, 0x37	; 55
 6f0:	81 60       	ori	r24, 0x01	; 1
 6f2:	87 bf       	out	0x37, r24	; 55

   ////////////////////////////////////////////////////////////////////////////////////////////    
   // Echo 신호 펄스폭 시간 측정을 위한 Timer 3 설정
   // 교재 PP238-244(레지스터 그림과 표12.4 - 표12.5 참조)

    TCCR3A &= ~0x03;      // Normal mode(타이머모드), 타이머 3 시작(분주비 8) 
 6f4:	80 91 8b 00 	lds	r24, 0x008B
 6f8:	8c 7f       	andi	r24, 0xFC	; 252
 6fa:	80 93 8b 00 	sts	0x008B, r24
                          // 내부클럭주기 = 8/ (16x10^6) = 0.5 usec (0.5usec 단위로 측정) 
                          // TCCR3A = 0b******00,  TCCR3B = 0b***00010 
                          // TCCR3A = TCCR3A & ~0b00000011(~0x03)   
    TCCR3B &= ~0x1D;      // TCCR3B = TCCR3B & ~0b00011101(~0x1D)                               
 6fe:	80 91 8a 00 	lds	r24, 0x008A
 702:	82 7e       	andi	r24, 0xE2	; 226
 704:	80 93 8a 00 	sts	0x008A, r24
    TCCR3B |=  0x02;      // TCCR3B = TCCR3B | 0b00000010( 0x02 )  
 708:	80 91 8a 00 	lds	r24, 0x008A
 70c:	82 60       	ori	r24, 0x02	; 2
 70e:	80 93 8a 00 	sts	0x008A, r24

   //////////////////////////////////////////////////////////////////////////////////////////
   // 외부인터럽트 4( pin: INT4/PE4 ) 설정 :  초음파센서모듈 Echo 신호가 입력됨.    
   // 교재 pp108-109 (레지스터 그림, 표 7.4-표7.5 참조 )

   EICRB &= ~0x02;        // INT4 : 하강에지(falling edge) 상승에지(rising edge) 모두에서 인터럽트 요구
 712:	8a b7       	in	r24, 0x3a	; 58
 714:	8d 7f       	andi	r24, 0xFD	; 253
 716:	8a bf       	out	0x3a, r24	; 58
                          // EICRB = 0b**** **01 
                          // EICRB = EICRB & ~0b0000 0010(~0x02 ) : 0 설정
   EICRB |=  0x01;        // EICRB = EICRB | 0b0000 0001( 0x01 ) :   1 설정
 718:	8a b7       	in	r24, 0x3a	; 58
 71a:	81 60       	ori	r24, 0x01	; 1
 71c:	8a bf       	out	0x3a, r24	; 58
   EIMSK |= 0x10;         // INT4 Enable(허용) 
 71e:	89 b7       	in	r24, 0x39	; 57
 720:	80 61       	ori	r24, 0x10	; 16
 722:	89 bf       	out	0x39, r24	; 57
}

void   ADC_enable(void)         // ADC( AD변환기 ) 관련 레지스터 설정 함수 
{
    //////  (교재 pp321-322 레제스터 ADMUX 그림, 표15.1, 표15.2 참조)
    ADMUX &= ~0xE0;          // 기준전압선택( AREF ), ADC결과 오른쪽 정렬 
 724:	87 b1       	in	r24, 0x07	; 7
 726:	8f 71       	andi	r24, 0x1F	; 31
 728:	87 b9       	out	0x07, r24	; 7
                             // ADMUX = 0b000* ****  
                             // ADMUX = ADMUX & ~0b1110 0000( ~0xE0 ) 
    //////  (교재 pp323-324 레제스터 ADCSRA 그림, 표15.3 참조)
    ADCSRA |= 0x87;     // ADC 가능(enable), 프리스케일러(Prescaler) 선택: 128 분주
 72a:	86 b1       	in	r24, 0x06	; 6
 72c:	87 68       	ori	r24, 0x87	; 135
 72e:	86 b9       	out	0x06, r24	; 6
                          // EIMSK = 0b***1 ****,  EIMSK = EIMSK | 0b0001 0000( 0x10 ) 
   //////////////////////////////////////////////////

   ADC_enable( );           // ADC( AD변환기 ) 관련 레지스터 설정 함수 호출 

   init_serial_USART0( 9600 );   // USART0 포트 시리얼통신 모드 설정 함수 호출, 
 730:	60 e8       	ldi	r22, 0x80	; 128
 732:	75 e2       	ldi	r23, 0x25	; 37
 734:	80 e0       	ldi	r24, 0x00	; 0
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	0e 94 b4 01 	call	0x368	; 0x368 <init_serial_USART0>
                                 // 관련 레지스터(송수신 허용, 보레이트 = 9600bps 설정 등) 설정 

   UCSR0B |= 0x80;          // UART0 수신(RX) 완료 인터럽트 허용
 73c:	57 9a       	sbi	0x0a, 7	; 10
                            // UCSR0B = 0b1*** ****, UCSR0B = UCSR0B | 0b1000 0000( 0x80 )  
           
   sei();                   // 전역인터럽트허용 
 73e:	78 94       	sei
{
	while( !( UCSR0A & 0x20 ) );	 	// 버퍼가 빌 때(새로운 데이터를 송신 가능할때)를 기다림
                                        // UCSR0A 레지스터의 데이터레지스터빔( bit5(UDRE) )비트가 
                                        // 1 이 될 때까지 기다림.

  	UDR0 = ch;					        // 버퍼에 문자를 쓴다
 740:	0a e0       	ldi	r16, 0x0A	; 10
	        {
                  PORTA |= 0x04;          // LED1(PA2 포트) OFF
	        }
	        else if( cmd_data == 3 )      // 명령 3("dc motor run") 이면
	        { 
                  Motor1_Duty = 100;                    // DC 모터1 회전속도 최대(100[%])로 설정 
 742:	74 e6       	ldi	r23, 0x64	; 100
 744:	c7 2e       	mov	r12, r23
 746:	d1 2c       	mov	r13, r1
   sei();                   // 전역인터럽트허용 

   while (1) 
   { 

        cli();                           // 전역인터럽트 금지
 748:	f8 94       	cli

 	    CDS_Value = CDS_adc_value;       // 검출된 조도센서의 디지털 값을 변수 CDS_Value에 저장 
 74a:	e0 90 42 02 	lds	r14, 0x0242
 74e:	f0 90 43 02 	lds	r15, 0x0243
 	    Distance_UltraSonic = distance;  // 검출된 거리 측정값을 변수 Distance_UltraSonic에 저장 
 752:	c0 91 36 02 	lds	r28, 0x0236
 756:	d0 91 37 02 	lds	r29, 0x0237

        sei();                           // 전역인터럽트 허용
 75a:	78 94       	sei

        if( new_recv_flag == 1 )      // 스마트폰으로부터 새로운 명령(문자열) 수신완료 시 
 75c:	80 91 34 02 	lds	r24, 0x0234
 760:	81 30       	cpi	r24, 0x01	; 1
 762:	91 f7       	brne	.-28     	; 0x748 <main+0xf8>
 764:	30 e0       	ldi	r19, 0x00	; 0
 766:	40 e0       	ldi	r20, 0x00	; 0
 768:	50 e0       	ldi	r21, 0x00	; 0
 76a:	60 e0       	ldi	r22, 0x00	; 0
 76c:	70 e0       	ldi	r23, 0x00	; 0
 76e:	10 e0       	ldi	r17, 0x00	; 0
 770:	20 e0       	ldi	r18, 0x00	; 0
 772:	44 c0       	rjmp	.+136    	; 0x7fc <main+0x1ac>

            //////////  스마트폰으로부터 수신된 명령(문자열) 판독  ///////////////

            for( i=0; i < recv_cnt ; i++)     // 저장되어있는 명령(문자열)과 일치하는 명령을 찾아냄
		    {
			    if( recv_data[i] == Cmd_Message_1[i] ) eq_count1++ ;
 774:	a2 2f       	mov	r26, r18
 776:	b0 e0       	ldi	r27, 0x00	; 0
 778:	fd 01       	movw	r30, r26
 77a:	e6 5e       	subi	r30, 0xE6	; 230
 77c:	fd 4f       	sbci	r31, 0xFD	; 253
 77e:	90 81       	ld	r25, Z
 780:	fd 01       	movw	r30, r26
 782:	e0 54       	subi	r30, 0x40	; 64
 784:	fe 4f       	sbci	r31, 0xFE	; 254
 786:	80 81       	ld	r24, Z
 788:	98 17       	cp	r25, r24
 78a:	09 f4       	brne	.+2      	; 0x78e <main+0x13e>
 78c:	3f 5f       	subi	r19, 0xFF	; 255
			    if( recv_data[i] == Cmd_Message_2[i] ) eq_count2++ ; 
 78e:	fd 01       	movw	r30, r26
 790:	e6 5e       	subi	r30, 0xE6	; 230
 792:	fd 4f       	sbci	r31, 0xFD	; 253
 794:	90 81       	ld	r25, Z
 796:	fd 01       	movw	r30, r26
 798:	e9 53       	subi	r30, 0x39	; 57
 79a:	fe 4f       	sbci	r31, 0xFE	; 254
 79c:	80 81       	ld	r24, Z
 79e:	98 17       	cp	r25, r24
 7a0:	09 f4       	brne	.+2      	; 0x7a4 <main+0x154>
 7a2:	4f 5f       	subi	r20, 0xFF	; 255
			    if( recv_data[i] == Cmd_Message_3[i] ) eq_count3++ ;
 7a4:	fd 01       	movw	r30, r26
 7a6:	e6 5e       	subi	r30, 0xE6	; 230
 7a8:	fd 4f       	sbci	r31, 0xFD	; 253
 7aa:	90 81       	ld	r25, Z
 7ac:	fd 01       	movw	r30, r26
 7ae:	e1 53       	subi	r30, 0x31	; 49
 7b0:	fe 4f       	sbci	r31, 0xFE	; 254
 7b2:	80 81       	ld	r24, Z
 7b4:	98 17       	cp	r25, r24
 7b6:	09 f4       	brne	.+2      	; 0x7ba <main+0x16a>
 7b8:	5f 5f       	subi	r21, 0xFF	; 255
			    if( recv_data[i] == Cmd_Message_4[i] ) eq_count4++ ;  
 7ba:	fd 01       	movw	r30, r26
 7bc:	e6 5e       	subi	r30, 0xE6	; 230
 7be:	fd 4f       	sbci	r31, 0xFD	; 253
 7c0:	90 81       	ld	r25, Z
 7c2:	fd 01       	movw	r30, r26
 7c4:	e4 52       	subi	r30, 0x24	; 36
 7c6:	fe 4f       	sbci	r31, 0xFE	; 254
 7c8:	80 81       	ld	r24, Z
 7ca:	98 17       	cp	r25, r24
 7cc:	09 f4       	brne	.+2      	; 0x7d0 <main+0x180>
 7ce:	6f 5f       	subi	r22, 0xFF	; 255
			    if( recv_data[i] == Cmd_Message_5[i] ) eq_count5++ ;  
 7d0:	fd 01       	movw	r30, r26
 7d2:	e6 5e       	subi	r30, 0xE6	; 230
 7d4:	fd 4f       	sbci	r31, 0xFD	; 253
 7d6:	90 81       	ld	r25, Z
 7d8:	fd 01       	movw	r30, r26
 7da:	e6 51       	subi	r30, 0x16	; 22
 7dc:	fe 4f       	sbci	r31, 0xFE	; 254
 7de:	80 81       	ld	r24, Z
 7e0:	98 17       	cp	r25, r24
 7e2:	09 f4       	brne	.+2      	; 0x7e6 <main+0x196>
 7e4:	7f 5f       	subi	r23, 0xFF	; 255
			    if( recv_data[i] == Cmd_Message_6[i] ) eq_count6++ ;  
 7e6:	fd 01       	movw	r30, r26
 7e8:	e6 5e       	subi	r30, 0xE6	; 230
 7ea:	fd 4f       	sbci	r31, 0xFD	; 253
 7ec:	90 81       	ld	r25, Z
 7ee:	af 5f       	subi	r26, 0xFF	; 255
 7f0:	bd 4f       	sbci	r27, 0xFD	; 253
 7f2:	8c 91       	ld	r24, X
 7f4:	98 17       	cp	r25, r24
 7f6:	09 f4       	brne	.+2      	; 0x7fa <main+0x1aa>
 7f8:	1f 5f       	subi	r17, 0xFF	; 255
        if( new_recv_flag == 1 )      // 스마트폰으로부터 새로운 명령(문자열) 수신완료 시 
	    { 

            //////////  스마트폰으로부터 수신된 명령(문자열) 판독  ///////////////

            for( i=0; i < recv_cnt ; i++)     // 저장되어있는 명령(문자열)과 일치하는 명령을 찾아냄
 7fa:	2f 5f       	subi	r18, 0xFF	; 255
 7fc:	80 91 33 02 	lds	r24, 0x0233
 800:	28 17       	cp	r18, r24
 802:	08 f4       	brcc	.+2      	; 0x806 <main+0x1b6>
 804:	b7 cf       	rjmp	.-146    	; 0x774 <main+0x124>
			    if( recv_data[i] == Cmd_Message_4[i] ) eq_count4++ ;  
			    if( recv_data[i] == Cmd_Message_5[i] ) eq_count5++ ;  
			    if( recv_data[i] == Cmd_Message_6[i] ) eq_count6++ ;  
            }

            if     ( eq_count1 == 6  && eq_count1 == recv_cnt )  cmd_data = 1 ;     // 명령 1
 806:	36 30       	cpi	r19, 0x06	; 6
 808:	31 f4       	brne	.+12     	; 0x816 <main+0x1c6>
 80a:	80 91 33 02 	lds	r24, 0x0233
 80e:	86 30       	cpi	r24, 0x06	; 6
 810:	11 f4       	brne	.+4      	; 0x816 <main+0x1c6>
 812:	11 e0       	ldi	r17, 0x01	; 1
 814:	29 c0       	rjmp	.+82     	; 0x868 <main+0x218>
            else if( eq_count2 == 7  && eq_count2 == recv_cnt )  cmd_data = 2 ;     // 명령 2   
 816:	47 30       	cpi	r20, 0x07	; 7
 818:	31 f4       	brne	.+12     	; 0x826 <main+0x1d6>
 81a:	80 91 33 02 	lds	r24, 0x0233
 81e:	87 30       	cpi	r24, 0x07	; 7
 820:	11 f4       	brne	.+4      	; 0x826 <main+0x1d6>
 822:	12 e0       	ldi	r17, 0x02	; 2
 824:	21 c0       	rjmp	.+66     	; 0x868 <main+0x218>
            else if( eq_count3 == 12 && eq_count3 == recv_cnt )  cmd_data = 3 ;     // 명령 3
 826:	5c 30       	cpi	r21, 0x0C	; 12
 828:	31 f4       	brne	.+12     	; 0x836 <main+0x1e6>
 82a:	80 91 33 02 	lds	r24, 0x0233
 82e:	8c 30       	cpi	r24, 0x0C	; 12
 830:	11 f4       	brne	.+4      	; 0x836 <main+0x1e6>
 832:	13 e0       	ldi	r17, 0x03	; 3
 834:	19 c0       	rjmp	.+50     	; 0x868 <main+0x218>
            else if( eq_count4 == 13 && eq_count4 == recv_cnt )  cmd_data = 4 ;     // 명령 4 
 836:	6d 30       	cpi	r22, 0x0D	; 13
 838:	31 f4       	brne	.+12     	; 0x846 <main+0x1f6>
 83a:	80 91 33 02 	lds	r24, 0x0233
 83e:	8d 30       	cpi	r24, 0x0D	; 13
 840:	11 f4       	brne	.+4      	; 0x846 <main+0x1f6>
 842:	14 e0       	ldi	r17, 0x04	; 4
 844:	11 c0       	rjmp	.+34     	; 0x868 <main+0x218>
            else if( eq_count5 == 22 && eq_count5 == recv_cnt )  cmd_data = 5 ;     // 명령 5
 846:	76 31       	cpi	r23, 0x16	; 22
 848:	31 f4       	brne	.+12     	; 0x856 <main+0x206>
 84a:	80 91 33 02 	lds	r24, 0x0233
 84e:	86 31       	cpi	r24, 0x16	; 22
 850:	11 f4       	brne	.+4      	; 0x856 <main+0x206>
 852:	15 e0       	ldi	r17, 0x05	; 5
 854:	09 c0       	rjmp	.+18     	; 0x868 <main+0x218>
            else if( eq_count6 == 15 && eq_count6 == recv_cnt )  cmd_data = 6 ;     // 명령 6
 856:	1f 30       	cpi	r17, 0x0F	; 15
 858:	31 f4       	brne	.+12     	; 0x866 <main+0x216>
 85a:	80 91 33 02 	lds	r24, 0x0233
 85e:	8f 30       	cpi	r24, 0x0F	; 15
 860:	11 f4       	brne	.+4      	; 0x866 <main+0x216>
 862:	16 e0       	ldi	r17, 0x06	; 6
 864:	01 c0       	rjmp	.+2      	; 0x868 <main+0x218>
 866:	1e ef       	ldi	r17, 0xFE	; 254
		    else                                                 cmd_data = 0xFE ;  // 명령 오류

            eq_count1 = 0; eq_count2 = 0; eq_count3 = 0; eq_count4 = 0; eq_count5 = 0; eq_count6 = 0; 

            new_recv_flag = 0;                      // 새로운 명령(문자열) 수신 플래그 리셋
 868:	10 92 34 02 	sts	0x0234, r1


            /////////  판독된 새로운 명령(Command)에 대한 실행    //////

	        if( cmd_data ==  1 )          // 명령 1("led on") 이면
 86c:	11 30       	cpi	r17, 0x01	; 1
 86e:	11 f4       	brne	.+4      	; 0x874 <main+0x224>
	        {
                  PORTA &= ~0x04;        // LED1(PA2 포트) ON
 870:	da 98       	cbi	0x1b, 2	; 27
 872:	84 c0       	rjmp	.+264    	; 0x97c <main+0x32c>
	        }
	        else if( cmd_data == 2 )      // 명령 2("led off") 이면
 874:	12 30       	cpi	r17, 0x02	; 2
 876:	11 f4       	brne	.+4      	; 0x87c <main+0x22c>
	        {
                  PORTA |= 0x04;          // LED1(PA2 포트) OFF
 878:	da 9a       	sbi	0x1b, 2	; 27
 87a:	80 c0       	rjmp	.+256    	; 0x97c <main+0x32c>
	        }
	        else if( cmd_data == 3 )      // 명령 3("dc motor run") 이면
 87c:	13 30       	cpi	r17, 0x03	; 3
 87e:	59 f4       	brne	.+22     	; 0x896 <main+0x246>
	        { 
                  Motor1_Duty = 100;                    // DC 모터1 회전속도 최대(100[%])로 설정 
 880:	d0 92 49 02 	sts	0x0249, r13
 884:	c0 92 48 02 	sts	0x0248, r12
                  DC_Motor1_Run_Fwd( Motor1_Duty );   // DC 모터1 정회전(PWM구동)  
 888:	80 91 48 02 	lds	r24, 0x0248
 88c:	90 91 49 02 	lds	r25, 0x0249
 890:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DC_Motor1_Run_Fwd>
 894:	73 c0       	rjmp	.+230    	; 0x97c <main+0x32c>
	       }
	       else if( cmd_data == 4 )      // 명령 4("dc motor stop") 이면
 896:	14 30       	cpi	r17, 0x04	; 4
 898:	21 f4       	brne	.+8      	; 0x8a2 <main+0x252>
    OCR1A = PWM_Period - duty;   // 회전속도(PWM Duty)설정 : DC모터1 A단자(+) = PWM신호(OC1A(PB5))  
}

void DC_Motor1_Stop( void )   // DC 모터1 정지 함수 
{
    PORTA &= ~0x01;     // 회전방향설정(정회전) :            DC모터1 B단자(-) = 0(Low) ( PA0 = 0 )    
 89a:	d8 98       	cbi	0x1b, 0	; 27
    OCR1A = 0;           // 회전속도 0(PWM Duty = 0) 설정 : DC모터1 A단자(+) = PWM신호(OC1A(PB5))  
 89c:	1b bc       	out	0x2b, r1	; 43
 89e:	1a bc       	out	0x2a, r1	; 42
 8a0:	6d c0       	rjmp	.+218    	; 0x97c <main+0x32c>
	       }
	       else if( cmd_data == 4 )      // 명령 4("dc motor stop") 이면
	       {
                  DC_Motor1_Stop( );       // DC모터1 정지
	       }
	       else if( cmd_data == 5 )      // 명령 5("read ultrasonic sensor")  이면
 8a2:	15 30       	cpi	r17, 0x05	; 5
 8a4:	71 f5       	brne	.+92     	; 0x902 <main+0x2b2>
	       {
                  SerialPutString_USART0( "measured distance = " ); // 스마트폰으로 메시지 전송
 8a6:	8d e1       	ldi	r24, 0x1D	; 29
 8a8:	91 e0       	ldi	r25, 0x01	; 1
 8aa:	0e 94 db 01 	call	0x3b6	; 0x3b6 <SerialPutString_USART0>

		     // 초음파센서 1에 의해 측정된 거리 Distance_UltraSonic를 십진수로 변환 후 
                  // 각 자리수(3자리)를 문자데이터(ASCII)로 변환후 스마트폰으로 전송 

                  HexToDec( Distance_UltraSonic, 10 );             
 8ae:	ce 01       	movw	r24, r28
 8b0:	6a e0       	ldi	r22, 0x0A	; 10
 8b2:	70 e0       	ldi	r23, 0x00	; 0
 8b4:	0e 94 a2 02 	call	0x544	; 0x544 <HexToDec>
                  SerialPutChar_USART0( NumToAsc(cnumber[2]) );  // Distance_UltraSonic 값의 100자리 전송
 8b8:	80 91 14 02 	lds	r24, 0x0214
	} while(num);
} 

char NumToAsc( unsigned char Num )       // Num으로 넘어온 16진수 1자리 숫자를 문자데이터(ASCII 코드)로 
{                                        // 변환하여 리턴하는 함수
	if( Num <10 ) Num += 0x30; 
 8bc:	8a 30       	cpi	r24, 0x0A	; 10
 8be:	10 f4       	brcc	.+4      	; 0x8c4 <main+0x274>
 8c0:	80 5d       	subi	r24, 0xD0	; 208
 8c2:	01 c0       	rjmp	.+2      	; 0x8c6 <main+0x276>
	else          Num += 0x37; 
 8c4:	89 5c       	subi	r24, 0xC9	; 201
// 한 문자를 송신한다.
///////////////////////////////////////////////////////////

void SerialPutChar_USART0(char ch)
{
	while( !( UCSR0A & 0x20 ) );	 	// 버퍼가 빌 때(새로운 데이터를 송신 가능할때)를 기다림
 8c6:	5d 9b       	sbis	0x0b, 5	; 11
 8c8:	fe cf       	rjmp	.-4      	; 0x8c6 <main+0x276>
                                        // UCSR0A 레지스터의 데이터레지스터빔( bit5(UDRE) )비트가 
                                        // 1 이 될 때까지 기다림.

  	UDR0 = ch;					        // 버퍼에 문자를 쓴다
 8ca:	8c b9       	out	0x0c, r24	; 12
		     // 초음파센서 1에 의해 측정된 거리 Distance_UltraSonic를 십진수로 변환 후 
                  // 각 자리수(3자리)를 문자데이터(ASCII)로 변환후 스마트폰으로 전송 

                  HexToDec( Distance_UltraSonic, 10 );             
                  SerialPutChar_USART0( NumToAsc(cnumber[2]) );  // Distance_UltraSonic 값의 100자리 전송
                  SerialPutChar_USART0( NumToAsc(cnumber[1]) );  // Distance_UltraSonic 값의 10자리 전송 
 8cc:	80 91 13 02 	lds	r24, 0x0213
	} while(num);
} 

char NumToAsc( unsigned char Num )       // Num으로 넘어온 16진수 1자리 숫자를 문자데이터(ASCII 코드)로 
{                                        // 변환하여 리턴하는 함수
	if( Num <10 ) Num += 0x30; 
 8d0:	8a 30       	cpi	r24, 0x0A	; 10
 8d2:	10 f4       	brcc	.+4      	; 0x8d8 <main+0x288>
 8d4:	80 5d       	subi	r24, 0xD0	; 208
 8d6:	01 c0       	rjmp	.+2      	; 0x8da <main+0x28a>
	else          Num += 0x37; 
 8d8:	89 5c       	subi	r24, 0xC9	; 201
// 한 문자를 송신한다.
///////////////////////////////////////////////////////////

void SerialPutChar_USART0(char ch)
{
	while( !( UCSR0A & 0x20 ) );	 	// 버퍼가 빌 때(새로운 데이터를 송신 가능할때)를 기다림
 8da:	5d 9b       	sbis	0x0b, 5	; 11
 8dc:	fe cf       	rjmp	.-4      	; 0x8da <main+0x28a>
                                        // UCSR0A 레지스터의 데이터레지스터빔( bit5(UDRE) )비트가 
                                        // 1 이 될 때까지 기다림.

  	UDR0 = ch;					        // 버퍼에 문자를 쓴다
 8de:	8c b9       	out	0x0c, r24	; 12
                  // 각 자리수(3자리)를 문자데이터(ASCII)로 변환후 스마트폰으로 전송 

                  HexToDec( Distance_UltraSonic, 10 );             
                  SerialPutChar_USART0( NumToAsc(cnumber[2]) );  // Distance_UltraSonic 값의 100자리 전송
                  SerialPutChar_USART0( NumToAsc(cnumber[1]) );  // Distance_UltraSonic 값의 10자리 전송 
                  SerialPutChar_USART0( NumToAsc(cnumber[0]) );  // Distance_UltraSonic 값의 1자리 전송
 8e0:	80 91 12 02 	lds	r24, 0x0212
	} while(num);
} 

char NumToAsc( unsigned char Num )       // Num으로 넘어온 16진수 1자리 숫자를 문자데이터(ASCII 코드)로 
{                                        // 변환하여 리턴하는 함수
	if( Num <10 ) Num += 0x30; 
 8e4:	8a 30       	cpi	r24, 0x0A	; 10
 8e6:	10 f4       	brcc	.+4      	; 0x8ec <main+0x29c>
 8e8:	80 5d       	subi	r24, 0xD0	; 208
 8ea:	01 c0       	rjmp	.+2      	; 0x8ee <main+0x29e>
	else          Num += 0x37; 
 8ec:	89 5c       	subi	r24, 0xC9	; 201
// 한 문자를 송신한다.
///////////////////////////////////////////////////////////

void SerialPutChar_USART0(char ch)
{
	while( !( UCSR0A & 0x20 ) );	 	// 버퍼가 빌 때(새로운 데이터를 송신 가능할때)를 기다림
 8ee:	5d 9b       	sbis	0x0b, 5	; 11
 8f0:	fe cf       	rjmp	.-4      	; 0x8ee <main+0x29e>
                                        // UCSR0A 레지스터의 데이터레지스터빔( bit5(UDRE) )비트가 
                                        // 1 이 될 때까지 기다림.

  	UDR0 = ch;					        // 버퍼에 문자를 쓴다
 8f2:	8c b9       	out	0x0c, r24	; 12

                  HexToDec( Distance_UltraSonic, 10 );             
                  SerialPutChar_USART0( NumToAsc(cnumber[2]) );  // Distance_UltraSonic 값의 100자리 전송
                  SerialPutChar_USART0( NumToAsc(cnumber[1]) );  // Distance_UltraSonic 값의 10자리 전송 
                  SerialPutChar_USART0( NumToAsc(cnumber[0]) );  // Distance_UltraSonic 값의 1자리 전송
                  SerialPutString_USART0( "cm" );                    // 스마트폰으로 메시지(거리 단위 cm) 전송
 8f4:	82 e3       	ldi	r24, 0x32	; 50
 8f6:	91 e0       	ldi	r25, 0x01	; 1
 8f8:	0e 94 db 01 	call	0x3b6	; 0x3b6 <SerialPutString_USART0>
// 한 문자를 송신한다.
///////////////////////////////////////////////////////////

void SerialPutChar_USART0(char ch)
{
	while( !( UCSR0A & 0x20 ) );	 	// 버퍼가 빌 때(새로운 데이터를 송신 가능할때)를 기다림
 8fc:	5d 9b       	sbis	0x0b, 5	; 11
 8fe:	fe cf       	rjmp	.-4      	; 0x8fc <main+0x2ac>
 900:	35 c0       	rjmp	.+106    	; 0x96c <main+0x31c>
                  SerialPutChar_USART0( NumToAsc(cnumber[1]) );  // Distance_UltraSonic 값의 10자리 전송 
                  SerialPutChar_USART0( NumToAsc(cnumber[0]) );  // Distance_UltraSonic 값의 1자리 전송
                  SerialPutString_USART0( "cm" );                    // 스마트폰으로 메시지(거리 단위 cm) 전송
                  SerialPutChar_USART0('\n');       // 스마트폰으로 데이터 전송시 Line Feed('\n')를 항상 끝에 전송해야함 
	       }
	       else if( cmd_data == 6 )      // 명령 6("read cds sensor")  이면
 902:	16 30       	cpi	r17, 0x06	; 6
 904:	a9 f5       	brne	.+106    	; 0x970 <main+0x320>
	       {
                  SerialPutString_USART0( "CDS value = " ); // 스마트폰으로 메시지 전송
 906:	85 e3       	ldi	r24, 0x35	; 53
 908:	91 e0       	ldi	r25, 0x01	; 1
 90a:	0e 94 db 01 	call	0x3b6	; 0x3b6 <SerialPutString_USART0>

		          // CDS센서(조도센서)에 의해 측정된 조도값(변수 CDS_Value)을 십진수로 변환 후 
                  // 각 자리수(4자리)를 문자데이터(ASCII)로 변환후 스마트폰으로 전송 

                  HexToDec( CDS_Value, 10 );      
 90e:	c7 01       	movw	r24, r14
 910:	6a e0       	ldi	r22, 0x0A	; 10
 912:	70 e0       	ldi	r23, 0x00	; 0
 914:	0e 94 a2 02 	call	0x544	; 0x544 <HexToDec>
                  SerialPutChar_USART0( NumToAsc(cnumber[2]) );  // 조도값(CDS_Value)의 1000 자리 전송      
 918:	80 91 14 02 	lds	r24, 0x0214
	} while(num);
} 

char NumToAsc( unsigned char Num )       // Num으로 넘어온 16진수 1자리 숫자를 문자데이터(ASCII 코드)로 
{                                        // 변환하여 리턴하는 함수
	if( Num <10 ) Num += 0x30; 
 91c:	8a 30       	cpi	r24, 0x0A	; 10
 91e:	10 f4       	brcc	.+4      	; 0x924 <main+0x2d4>
 920:	80 5d       	subi	r24, 0xD0	; 208
 922:	01 c0       	rjmp	.+2      	; 0x926 <main+0x2d6>
	else          Num += 0x37; 
 924:	89 5c       	subi	r24, 0xC9	; 201
// 한 문자를 송신한다.
///////////////////////////////////////////////////////////

void SerialPutChar_USART0(char ch)
{
	while( !( UCSR0A & 0x20 ) );	 	// 버퍼가 빌 때(새로운 데이터를 송신 가능할때)를 기다림
 926:	5d 9b       	sbis	0x0b, 5	; 11
 928:	fe cf       	rjmp	.-4      	; 0x926 <main+0x2d6>
                                        // UCSR0A 레지스터의 데이터레지스터빔( bit5(UDRE) )비트가 
                                        // 1 이 될 때까지 기다림.

  	UDR0 = ch;					        // 버퍼에 문자를 쓴다
 92a:	8c b9       	out	0x0c, r24	; 12
		          // CDS센서(조도센서)에 의해 측정된 조도값(변수 CDS_Value)을 십진수로 변환 후 
                  // 각 자리수(4자리)를 문자데이터(ASCII)로 변환후 스마트폰으로 전송 

                  HexToDec( CDS_Value, 10 );      
                  SerialPutChar_USART0( NumToAsc(cnumber[2]) );  // 조도값(CDS_Value)의 1000 자리 전송      
                  SerialPutChar_USART0( NumToAsc(cnumber[2]) );  // 조도값(CDS_Value)의 100자리 전송
 92c:	80 91 14 02 	lds	r24, 0x0214
	} while(num);
} 

char NumToAsc( unsigned char Num )       // Num으로 넘어온 16진수 1자리 숫자를 문자데이터(ASCII 코드)로 
{                                        // 변환하여 리턴하는 함수
	if( Num <10 ) Num += 0x30; 
 930:	8a 30       	cpi	r24, 0x0A	; 10
 932:	10 f4       	brcc	.+4      	; 0x938 <main+0x2e8>
 934:	80 5d       	subi	r24, 0xD0	; 208
 936:	01 c0       	rjmp	.+2      	; 0x93a <main+0x2ea>
	else          Num += 0x37; 
 938:	89 5c       	subi	r24, 0xC9	; 201
// 한 문자를 송신한다.
///////////////////////////////////////////////////////////

void SerialPutChar_USART0(char ch)
{
	while( !( UCSR0A & 0x20 ) );	 	// 버퍼가 빌 때(새로운 데이터를 송신 가능할때)를 기다림
 93a:	5d 9b       	sbis	0x0b, 5	; 11
 93c:	fe cf       	rjmp	.-4      	; 0x93a <main+0x2ea>
                                        // UCSR0A 레지스터의 데이터레지스터빔( bit5(UDRE) )비트가 
                                        // 1 이 될 때까지 기다림.

  	UDR0 = ch;					        // 버퍼에 문자를 쓴다
 93e:	8c b9       	out	0x0c, r24	; 12
                  // 각 자리수(4자리)를 문자데이터(ASCII)로 변환후 스마트폰으로 전송 

                  HexToDec( CDS_Value, 10 );      
                  SerialPutChar_USART0( NumToAsc(cnumber[2]) );  // 조도값(CDS_Value)의 1000 자리 전송      
                  SerialPutChar_USART0( NumToAsc(cnumber[2]) );  // 조도값(CDS_Value)의 100자리 전송
                  SerialPutChar_USART0( NumToAsc(cnumber[1]) );  // 조도값(CDS_Value)의 10자리 전송 
 940:	80 91 13 02 	lds	r24, 0x0213
	} while(num);
} 

char NumToAsc( unsigned char Num )       // Num으로 넘어온 16진수 1자리 숫자를 문자데이터(ASCII 코드)로 
{                                        // 변환하여 리턴하는 함수
	if( Num <10 ) Num += 0x30; 
 944:	8a 30       	cpi	r24, 0x0A	; 10
 946:	10 f4       	brcc	.+4      	; 0x94c <main+0x2fc>
 948:	80 5d       	subi	r24, 0xD0	; 208
 94a:	01 c0       	rjmp	.+2      	; 0x94e <main+0x2fe>
	else          Num += 0x37; 
 94c:	89 5c       	subi	r24, 0xC9	; 201
// 한 문자를 송신한다.
///////////////////////////////////////////////////////////

void SerialPutChar_USART0(char ch)
{
	while( !( UCSR0A & 0x20 ) );	 	// 버퍼가 빌 때(새로운 데이터를 송신 가능할때)를 기다림
 94e:	5d 9b       	sbis	0x0b, 5	; 11
 950:	fe cf       	rjmp	.-4      	; 0x94e <main+0x2fe>
                                        // UCSR0A 레지스터의 데이터레지스터빔( bit5(UDRE) )비트가 
                                        // 1 이 될 때까지 기다림.

  	UDR0 = ch;					        // 버퍼에 문자를 쓴다
 952:	8c b9       	out	0x0c, r24	; 12

                  HexToDec( CDS_Value, 10 );      
                  SerialPutChar_USART0( NumToAsc(cnumber[2]) );  // 조도값(CDS_Value)의 1000 자리 전송      
                  SerialPutChar_USART0( NumToAsc(cnumber[2]) );  // 조도값(CDS_Value)의 100자리 전송
                  SerialPutChar_USART0( NumToAsc(cnumber[1]) );  // 조도값(CDS_Value)의 10자리 전송 
                  SerialPutChar_USART0( NumToAsc(cnumber[0]) );  // 조도값(CDS_Value)의 1자리 전송
 954:	80 91 12 02 	lds	r24, 0x0212
	} while(num);
} 

char NumToAsc( unsigned char Num )       // Num으로 넘어온 16진수 1자리 숫자를 문자데이터(ASCII 코드)로 
{                                        // 변환하여 리턴하는 함수
	if( Num <10 ) Num += 0x30; 
 958:	8a 30       	cpi	r24, 0x0A	; 10
 95a:	10 f4       	brcc	.+4      	; 0x960 <main+0x310>
 95c:	80 5d       	subi	r24, 0xD0	; 208
 95e:	01 c0       	rjmp	.+2      	; 0x962 <main+0x312>
	else          Num += 0x37; 
 960:	89 5c       	subi	r24, 0xC9	; 201
// 한 문자를 송신한다.
///////////////////////////////////////////////////////////

void SerialPutChar_USART0(char ch)
{
	while( !( UCSR0A & 0x20 ) );	 	// 버퍼가 빌 때(새로운 데이터를 송신 가능할때)를 기다림
 962:	5d 9b       	sbis	0x0b, 5	; 11
 964:	fe cf       	rjmp	.-4      	; 0x962 <main+0x312>
                                        // UCSR0A 레지스터의 데이터레지스터빔( bit5(UDRE) )비트가 
                                        // 1 이 될 때까지 기다림.

  	UDR0 = ch;					        // 버퍼에 문자를 쓴다
 966:	8c b9       	out	0x0c, r24	; 12
// 한 문자를 송신한다.
///////////////////////////////////////////////////////////

void SerialPutChar_USART0(char ch)
{
	while( !( UCSR0A & 0x20 ) );	 	// 버퍼가 빌 때(새로운 데이터를 송신 가능할때)를 기다림
 968:	5d 9b       	sbis	0x0b, 5	; 11
 96a:	fe cf       	rjmp	.-4      	; 0x968 <main+0x318>
                                        // UCSR0A 레지스터의 데이터레지스터빔( bit5(UDRE) )비트가 
                                        // 1 이 될 때까지 기다림.

  	UDR0 = ch;					        // 버퍼에 문자를 쓴다
 96c:	0c b9       	out	0x0c, r16	; 12
 96e:	06 c0       	rjmp	.+12     	; 0x97c <main+0x32c>
                  SerialPutChar_USART0( NumToAsc(cnumber[0]) );  // 조도값(CDS_Value)의 1자리 전송

                  SerialPutChar_USART0('\n');      // 스마트폰으로 데이터 전송시 Line Feed('\n')를 항상 끝에 전송해야함 
	        }

            else if( cmd_data == 0xFE )      //  수신된 명령이 오류이면 
 970:	1e 3f       	cpi	r17, 0xFE	; 254
 972:	21 f4       	brne	.+8      	; 0x97c <main+0x32c>
	        {
                   SerialPutString_USART0( "Command Error!!  Try again.\n" ); //  스마트폰으로 명령 오류 메시지 전송
 974:	82 e4       	ldi	r24, 0x42	; 66
 976:	91 e0       	ldi	r25, 0x01	; 1
 978:	0e 94 db 01 	call	0x3b6	; 0x3b6 <SerialPutString_USART0>
	        }

           /////////////////////  LCD에 동작 모드 또는 통신 오류메시지 디스플레이  ////////////// 

            LcdCommand( ALLCLR );         // LCD Clear
 97c:	81 e0       	ldi	r24, 0x01	; 1
 97e:	0e 94 a0 00 	call	0x140	; 0x140 <LcdCommand>

            if( cmd_data != 0xFE  )          // 스마트폰으로부터 수신된 명령(문자열)에 오류가 없으면  
 982:	1e 3f       	cpi	r17, 0xFE	; 254
 984:	29 f1       	breq	.+74     	; 0x9d0 <main+0x380>
	        {  
	            LcdMove(0,0);    
 986:	80 e0       	ldi	r24, 0x00	; 0
 988:	60 e0       	ldi	r22, 0x00	; 0
 98a:	0e 94 bd 00 	call	0x17a	; 0x17a <LcdMove>
	            LcdPuts("Operating Mode:"); 
 98e:	8f e5       	ldi	r24, 0x5F	; 95
 990:	91 e0       	ldi	r25, 0x01	; 1
 992:	0e 94 83 00 	call	0x106	; 0x106 <LcdPuts>

	            LcdMove(1,0); 
 996:	81 e0       	ldi	r24, 0x01	; 1
 998:	60 e0       	ldi	r22, 0x00	; 0
 99a:	0e 94 bd 00 	call	0x17a	; 0x17a <LcdMove>
                if(      cmd_data == 1 || cmd_data == 2)       LcdPuts("LED ON/OFF"); 
 99e:	81 2f       	mov	r24, r17
 9a0:	81 50       	subi	r24, 0x01	; 1
 9a2:	82 30       	cpi	r24, 0x02	; 2
 9a4:	18 f4       	brcc	.+6      	; 0x9ac <main+0x35c>
 9a6:	8f e6       	ldi	r24, 0x6F	; 111
 9a8:	91 e0       	ldi	r25, 0x01	; 1
 9aa:	20 c0       	rjmp	.+64     	; 0x9ec <main+0x39c>
                else if( cmd_data == 3 || cmd_data == 4)       LcdPuts("DC Motor Control"); 
 9ac:	81 2f       	mov	r24, r17
 9ae:	83 50       	subi	r24, 0x03	; 3
 9b0:	82 30       	cpi	r24, 0x02	; 2
 9b2:	18 f4       	brcc	.+6      	; 0x9ba <main+0x36a>
 9b4:	8a e7       	ldi	r24, 0x7A	; 122
 9b6:	91 e0       	ldi	r25, 0x01	; 1
 9b8:	19 c0       	rjmp	.+50     	; 0x9ec <main+0x39c>
                else if( cmd_data == 5 )                       LcdPuts("UltrasonicSensor"); 
 9ba:	15 30       	cpi	r17, 0x05	; 5
 9bc:	19 f4       	brne	.+6      	; 0x9c4 <main+0x374>
 9be:	8b e8       	ldi	r24, 0x8B	; 139
 9c0:	91 e0       	ldi	r25, 0x01	; 1
 9c2:	14 c0       	rjmp	.+40     	; 0x9ec <main+0x39c>
                else if( cmd_data == 6 )                       LcdPuts("CDS Sensor"); 
 9c4:	16 30       	cpi	r17, 0x06	; 6
 9c6:	09 f0       	breq	.+2      	; 0x9ca <main+0x37a>
 9c8:	bf ce       	rjmp	.-642    	; 0x748 <main+0xf8>
 9ca:	8c e9       	ldi	r24, 0x9C	; 156
 9cc:	91 e0       	ldi	r25, 0x01	; 1
 9ce:	0e c0       	rjmp	.+28     	; 0x9ec <main+0x39c>
             }
             else if( cmd_data == 0xFE  )      // 스마트폰으로부터 수신된 명령(문자열)에 오류가 있으면  
	         {  
		          LcdMove(0, 0 );                // LCD에 오류메시지 디스플레이
 9d0:	80 e0       	ldi	r24, 0x00	; 0
 9d2:	60 e0       	ldi	r22, 0x00	; 0
 9d4:	0e 94 bd 00 	call	0x17a	; 0x17a <LcdMove>
		          LcdPuts("Cmd Error!!"); 
 9d8:	87 ea       	ldi	r24, 0xA7	; 167
 9da:	91 e0       	ldi	r25, 0x01	; 1
 9dc:	0e 94 83 00 	call	0x106	; 0x106 <LcdPuts>
	              LcdMove(1, 0 );
 9e0:	81 e0       	ldi	r24, 0x01	; 1
 9e2:	60 e0       	ldi	r22, 0x00	; 0
 9e4:	0e 94 bd 00 	call	0x17a	; 0x17a <LcdMove>
		          LcdPuts("Try Again."); 
 9e8:	83 eb       	ldi	r24, 0xB3	; 179
 9ea:	91 e0       	ldi	r25, 0x01	; 1
 9ec:	0e 94 83 00 	call	0x106	; 0x106 <LcdPuts>
 9f0:	ab ce       	rjmp	.-682    	; 0x748 <main+0xf8>

000009f2 <__udivmodhi4>:
 9f2:	aa 1b       	sub	r26, r26
 9f4:	bb 1b       	sub	r27, r27
 9f6:	51 e1       	ldi	r21, 0x11	; 17
 9f8:	07 c0       	rjmp	.+14     	; 0xa08 <__udivmodhi4_ep>

000009fa <__udivmodhi4_loop>:
 9fa:	aa 1f       	adc	r26, r26
 9fc:	bb 1f       	adc	r27, r27
 9fe:	a6 17       	cp	r26, r22
 a00:	b7 07       	cpc	r27, r23
 a02:	10 f0       	brcs	.+4      	; 0xa08 <__udivmodhi4_ep>
 a04:	a6 1b       	sub	r26, r22
 a06:	b7 0b       	sbc	r27, r23

00000a08 <__udivmodhi4_ep>:
 a08:	88 1f       	adc	r24, r24
 a0a:	99 1f       	adc	r25, r25
 a0c:	5a 95       	dec	r21
 a0e:	a9 f7       	brne	.-22     	; 0x9fa <__udivmodhi4_loop>
 a10:	80 95       	com	r24
 a12:	90 95       	com	r25
 a14:	bc 01       	movw	r22, r24
 a16:	cd 01       	movw	r24, r26
 a18:	08 95       	ret

00000a1a <__divmodhi4>:
 a1a:	97 fb       	bst	r25, 7
 a1c:	09 2e       	mov	r0, r25
 a1e:	07 26       	eor	r0, r23
 a20:	0a d0       	rcall	.+20     	; 0xa36 <__divmodhi4_neg1>
 a22:	77 fd       	sbrc	r23, 7
 a24:	04 d0       	rcall	.+8      	; 0xa2e <__divmodhi4_neg2>
 a26:	e5 df       	rcall	.-54     	; 0x9f2 <__udivmodhi4>
 a28:	06 d0       	rcall	.+12     	; 0xa36 <__divmodhi4_neg1>
 a2a:	00 20       	and	r0, r0
 a2c:	1a f4       	brpl	.+6      	; 0xa34 <__divmodhi4_exit>

00000a2e <__divmodhi4_neg2>:
 a2e:	70 95       	com	r23
 a30:	61 95       	neg	r22
 a32:	7f 4f       	sbci	r23, 0xFF	; 255

00000a34 <__divmodhi4_exit>:
 a34:	08 95       	ret

00000a36 <__divmodhi4_neg1>:
 a36:	f6 f7       	brtc	.-4      	; 0xa34 <__divmodhi4_exit>
 a38:	90 95       	com	r25
 a3a:	81 95       	neg	r24
 a3c:	9f 4f       	sbci	r25, 0xFF	; 255
 a3e:	08 95       	ret

00000a40 <__udivmodsi4>:
 a40:	a1 e2       	ldi	r26, 0x21	; 33
 a42:	1a 2e       	mov	r1, r26
 a44:	aa 1b       	sub	r26, r26
 a46:	bb 1b       	sub	r27, r27
 a48:	fd 01       	movw	r30, r26
 a4a:	0d c0       	rjmp	.+26     	; 0xa66 <__udivmodsi4_ep>

00000a4c <__udivmodsi4_loop>:
 a4c:	aa 1f       	adc	r26, r26
 a4e:	bb 1f       	adc	r27, r27
 a50:	ee 1f       	adc	r30, r30
 a52:	ff 1f       	adc	r31, r31
 a54:	a2 17       	cp	r26, r18
 a56:	b3 07       	cpc	r27, r19
 a58:	e4 07       	cpc	r30, r20
 a5a:	f5 07       	cpc	r31, r21
 a5c:	20 f0       	brcs	.+8      	; 0xa66 <__udivmodsi4_ep>
 a5e:	a2 1b       	sub	r26, r18
 a60:	b3 0b       	sbc	r27, r19
 a62:	e4 0b       	sbc	r30, r20
 a64:	f5 0b       	sbc	r31, r21

00000a66 <__udivmodsi4_ep>:
 a66:	66 1f       	adc	r22, r22
 a68:	77 1f       	adc	r23, r23
 a6a:	88 1f       	adc	r24, r24
 a6c:	99 1f       	adc	r25, r25
 a6e:	1a 94       	dec	r1
 a70:	69 f7       	brne	.-38     	; 0xa4c <__udivmodsi4_loop>
 a72:	60 95       	com	r22
 a74:	70 95       	com	r23
 a76:	80 95       	com	r24
 a78:	90 95       	com	r25
 a7a:	9b 01       	movw	r18, r22
 a7c:	ac 01       	movw	r20, r24
 a7e:	bd 01       	movw	r22, r26
 a80:	cf 01       	movw	r24, r30
 a82:	08 95       	ret

00000a84 <_exit>:
 a84:	f8 94       	cli

00000a86 <__stop_program>:
 a86:	ff cf       	rjmp	.-2      	; 0xa86 <__stop_program>
